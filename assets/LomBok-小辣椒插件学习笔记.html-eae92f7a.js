import{_ as e,Y as a,Z as s,a4 as n}from"./framework-646c68e2.js";const t={},r=n(`<h4 id="一、lombok插件概述" tabindex="-1"><a class="header-anchor" href="#一、lombok插件概述" aria-hidden="true">#</a> 一、LomBok插件概述</h4><p>LomBok插件是一款插件化注解API，可以在Java程序编译时根据注解为程序添加一些必需的通用代码，如常用的Getter、Setter、有参和无参构造方法等。</p><p>使用这款插件可以在很大程度上简化程序员所需要书写的代码量，但也有可能会带来一些意想不到的小问题，使程序的可读性变差。</p><h4 id="二、lombok插件配置方法" tabindex="-1"><a class="header-anchor" href="#二、lombok插件配置方法" aria-hidden="true">#</a> 二、LomBok插件配置方法</h4><p>1、导入依赖包，可以通过maven或者手动导入的方式完成。</p><p>2、在IDEA中安装LomBok插件(在IDEA的新版本中默认是绑定安装的)</p><p>插件的作用：在java文件编译之后的class文件中确实会包含get、set方法，但在书写源码时是没有这些方法的定义的，IDEA会认为这是错误，所以这个时候就需要一个lombok插件来解决问题。</p><p>3、重启IDEA后，就可以开始使用LomBok插件的功能了，如果在运行时有报错，可能是插件没能正常加载，再次重启IDEA就好。</p><h4 id="三、lombok插件常用注解" tabindex="-1"><a class="header-anchor" href="#三、lombok插件常用注解" aria-hidden="true">#</a> 三、LomBok插件常用注解</h4><h5 id="_1、-getter" tabindex="-1"><a class="header-anchor" href="#_1、-getter" aria-hidden="true">#</a> 1、@Getter</h5><p>作用：用来给成员变量生成相应的get方法，同时可以为生成的方法指定访问修饰符，默认修饰符是 public ，也可手动指定修饰符。</p><p>位置：指定在类上，会对当前类的所有字段都生成相应的get方法，指定在字段上，只会对当前字段生效，当类和字段都设定上后，字段部分的设定优先生效。</p><p>注：@Getter注解在指定类的时候，默认不会对 静态变量 生效，需要手动在静态字段上指定才可以，对于 final 常量可以正常生效。</p><h5 id="_2、-setter" tabindex="-1"><a class="header-anchor" href="#_2、-setter" aria-hidden="true">#</a> 2、@Setter</h5><p>作用：用来给成员变量生成相应的set方法，同时可以为生成的方法指定访问修饰符，默认修饰符是 public ，也可手动指定修饰符。</p><p>位置：同 @Getter 的用法。</p><p>注：@Setter注解在指定类的时候，默认也不会对 静态变量 生效，需要手动在静态字段上指定才可以，但对于 final 常量不可以生效。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span><span class="token punctuation">(</span><span class="token class-name">AccessLevel</span><span class="token punctuation">.</span><span class="token constant">PRIVATE</span><span class="token punctuation">)</span>	<span class="token comment">//设定生成的set方法是private的</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LomBok</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token comment">//可在类上直接设置@Getter和@Setter注解</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、-accessors" tabindex="-1"><a class="header-anchor" href="#_3、-accessors" aria-hidden="true">#</a> 3、@Accessors</h5><p>作用：这个注解要与@Getter与@Setter搭配使用，用来修改默认的setter与getter方法的形式。</p><p>位置：可指定在类和字段上。</p><p><strong>属性</strong>：</p><p>3.1、chain 属性，属性值有true和false两种，默认是false，打开后可以让set方法支持链式调用，也就是set方法会返回对象本身。</p><p>3.2、fluent 属性，属性值有true和false两种，默认也是false，打开后会使get和set方法的名字变得和成员变量的名称一样，通过重载去调用git和set。</p><p>注：@Getter和@Setter注解生成的get和set方法的命名规则</p><p>默认是在get或set后将原变量名的开头字母大写，再拼接到一块，若原本就是大写，则不进行改变。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> id<span class="token punctuation">;</span>		<span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//将成员变量首字母大写后拼接。</span>
<span class="token keyword">int</span> <span class="token class-name">Id</span>		<span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//原名称大写则不变。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、-tostring" tabindex="-1"><a class="header-anchor" href="#_4、-tostring" aria-hidden="true">#</a> 4、@ToString</h5><p>作用：用于格式化输出对象和toString方法类似，生成方法时只会使用类中的非静态成员变量。</p><p>位置：只能指定在类上。</p><p><strong>属性</strong>：</p><ul><li>includeFieldNames = true // 输出时是否显示字段名 ，默认是true</li><li>exclude = {&quot;name&quot;} // 排除某些字段，可多选，用逗号分隔就好</li><li>of = {&quot;age&quot;} // 只输出某些字段，和exclude不能同时使用</li><li>callSuper = true //是否输出父类对象的toString信息， 默认false</li><li>doNotUseGetters // 输出时不使用get方法获取成员属性</li></ul><p>@ToString.Include.rank 用于排序，数字越大排序越靠前，只能适用于字段和方法类型。</p><p>@ToString.Include.name 用于自定义字段名称，也只能适用于字段和方法。</p><h5 id="_5、-equalsandhashcode" tabindex="-1"><a class="header-anchor" href="#_5、-equalsandhashcode" aria-hidden="true">#</a> 5、@EqualsAndHashCode</h5><p>作用：用于生成equals和hashCode方法，也是只会使用非静态成员变量。</p><p>位置：只能指定在类上。</p><p><strong>属性</strong>：</p><ul><li>callSuper 用于比较父类对象是否相同，对于继承的子类的equals方法中最好使用这个选项，可以提高安全性，防止将父类对象和子类对象当成相同的对象。默认是false</li><li>cacheStrategy 对于hashCode方法是否添加缓存，在使用时会将第一次结果保存在变量中，下次就可以直接调用使用，默认是从不。</li><li>exclude = {&quot;name&quot;} // 排除某些字段，可多选，用逗号分隔就好</li><li>of = {&quot;age&quot;} // 只输出某些字段，和exclude不能同时使用</li></ul><h5 id="_6、构造器相关注解" tabindex="-1"><a class="header-anchor" href="#_6、构造器相关注解" aria-hidden="true">#</a> 6、构造器相关注解</h5><p><strong>共同点：</strong></p><p>都只能在类上使用。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>staticName：自定义构造方法的名称，原构造方法会被设定为私有。

access：设定方法的访问修饰符。默认是public

onConstructor：生成指定注解的构造器，默认为空
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1-、-allargsconstructor" tabindex="-1"><a class="header-anchor" href="#_1-、-allargsconstructor" aria-hidden="true">#</a> (1)、@AllArgsConstructor</h6><p>作用：生成所有参数的构造方法，</p><h6 id="_2-、-noargsconstructor" tabindex="-1"><a class="header-anchor" href="#_2-、-noargsconstructor" aria-hidden="true">#</a> (2)、@NoArgsConstructor</h6><p>作用：生成无参的构造方法</p><p><strong>特有属性</strong>：force：可以将所有 final 字段初始化为 0、null、false。默认为 false。</p><h6 id="_3-、-requiredargsconstructor" tabindex="-1"><a class="header-anchor" href="#_3-、-requiredargsconstructor" aria-hidden="true">#</a> (3)、@RequiredArgsConstructor</h6><p>作用：会将类中所有带有<code>@NonNull注解</code> 的或者带有<code>final修饰的成员变量</code>生成对应的构造方法。</p><h5 id="_7、-data" tabindex="-1"><a class="header-anchor" href="#_7、-data" aria-hidden="true">#</a> 7、@Data</h5><p>作用：相当于注解集合。效果等同于 <strong>@Getter + @Setter + @ToString + @EqualsAndHashCode + @RequiredArgsConstructor</strong> 效果同和这5个注解的效果。</p><p>注：该注解并不包括@NoArgsConstructor和@AllArgsConstructor注解效果，且在有继承的情况下不建议单独使用此注解，因为这里的equals方法没有经过设定，容易出现问题，应和@EqualsAndHashCode配合使用。</p><p>位置：指定在类中</p><p><strong>属性</strong>：staticConstructor：为生成的构造器指定自定义方法名称。</p><h5 id="_8、-value" tabindex="-1"><a class="header-anchor" href="#_8、-value" aria-hidden="true">#</a> 8、@value</h5><p>作用： 将字段都变成不可变类型：<strong>使用final修饰， 同时还包含@ToString、@EqualsAndHashCode、@AllArgsConstructor 、@Getter</strong>(注意只有Getter没有Setter)和@Data的作用比较类似。</p><p>位置：指定在类上</p><p><strong>属性</strong>：staticConstructor：为生成的构造器指定自定义方法名称。</p><h5 id="_9、-sneakythrows" tabindex="-1"><a class="header-anchor" href="#_9、-sneakythrows" aria-hidden="true">#</a> 9、@SneakyThrows</h5><p>作用：用于构建try-catch语句将方法包括起来。</p><p>位置：指定在方法或构造方法上</p><p><strong>属性</strong>：value： 用于指明要抛出的异常类型，默认是Throwable</p><h5 id="_10、-cleanup" tabindex="-1"><a class="header-anchor" href="#_10、-cleanup" aria-hidden="true">#</a> 10、@Cleanup</h5><p>作用：主要用来修饰 IO 流相关类, 会在 finally 代码块中对该资源进行 close();</p><p>位置：作用于局部变量中</p><p><strong>属性</strong>：value：指定关闭方法的方法名，默认是close。</p><p>注：也可以使用try-with-resources的写法，也可以自动关闭歹有autoclose的连接。</p><h5 id="_11、-builder" tabindex="-1"><a class="header-anchor" href="#_11、-builder" aria-hidden="true">#</a> 11、@Builder</h5><p>作用：建造者模式，一种比较重要的创建对象的过程，不再是生成一个构造方法，而是使用了一个内部类来完成对象的创建，可以精细化、分步去进行一个类对象的创建。</p><p>构造器类的的set方法支持链式调用</p><p>位置：类、方法、构造器上使用</p><p><strong>属性</strong>：</p><p><code>builderMethodName</code>：生成builder内部类对象的方法名称，默认是：builder</p><p><code>buildMethodName</code>： 返回建造对象的方法名称，默认是：build</p><p><code>builderClassName</code>：内部类的类名，</p><p><code>toBuilder</code>： 将build重新变回builder进行再次设置，默认为false</p><p><strong>@Builder.Default</strong></p><p>使用在属性上，用于指定某个属性的默认值，若无设置则使用默认值。</p><p><strong>@Builder.ObtainVia</strong></p><p>使用在属性上和方法内的参数里，用于对toBuilder方法生成的builder对象的值或方法的获取方式做一些限定。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>field：将某个属性的值用另外一个属性的值去代替
method：将某个属性的值获取方法改成自己指定的方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="四、lombok插件优缺点" tabindex="-1"><a class="header-anchor" href="#四、lombok插件优缺点" aria-hidden="true">#</a> 四、LomBok插件优缺点</h4><p>优点：</p><p>可以帮助我们省去很多冗余代码，使项目的开发更加高效、便捷。</p><p>缺点：</p><p>有很高的侵入性，在项目中有人使用会使得所有的人都要去使用这种插件，</p><p>会让代码可读性变差，调试起来也更加麻烦</p><p>同时过度使用可能会创造很多用不到的方法，造成隐患。</p>`,89),o=[r];function i(l,d){return a(),s("div",null,o)}const c=e(t,[["render",i],["__file","LomBok-小辣椒插件学习笔记.html.vue"]]);export{c as default};
