{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "WUYAN的博客",
  "home_page_url": "https://wuiyan.github.io/",
  "feed_url": "https://wuiyan.github.io/feed.json",
  "description": "众里寻他千百度，蓦然回首，那人却在灯火阑珊处",
  "items": [
    {
      "title": "博客的第一篇文章",
      "url": "https://wuiyan.github.io/posts/2023-04-12.html",
      "id": "https://wuiyan.github.io/posts/2023-04-12.html",
      "summary": "博客的第一篇文章 欢迎来到我的博客 🎉 我是YILS，一个前端开发者。从小我对编程和技术有浓厚的兴趣，也喜欢分享我的经验和知识。这个博客将是我与读者们分享我的想法、经验和技术的平台。我相信，通过这个博客，我们可以一起学习和成长。 我为什么要开始写博客呢？ 其实，这是因为我一直希望可以通过写作来记录和分享自己的经验和知识。我相信，通过写博客，我不仅可以分享我的观点，也可以帮助其他人更好地理解技术和编程。同时，这也是我提高自己技术水平的一个方法，因为我会不断地学习和研究，以便能够更好地分享我的经验和知识。",
      "content_html": "<h1> 博客的第一篇文章</h1>\n<h3> 欢迎来到我的博客 🎉</h3>\n<p><strong>我是YILS，一个前端开发者</strong>。从小我对编程和技术有浓厚的兴趣，也喜欢分享我的经验和知识。这个博客将是我与读者们分享我的想法、经验和技术的平台。我相信，通过这个博客，我们可以一起学习和成长。</p>\n<h3> 我为什么要开始写博客呢？</h3>\n<p>其实，这是因为<strong>我一直希望可以通过写作来记录和分享自己的经验和知识</strong>。我相信，通过写博客，我不仅可以分享我的观点，也可以帮助其他人更好地理解技术和编程。同时，这也是我提高自己技术水平的一个方法，因为我会不断地学习和研究，以便能够更好地分享我的经验和知识。</p>\n<h3> 我将在博客中分享什么内容呢？</h3>\n<p>在我的博客中，我将主要分享一些编程和技术方面的内容。<strong>我会写一些教程、技术分析、个人经验和项目案例，分享各种有趣的实用的工具</strong>等。我相信，这些内容将对那些热爱编程和技术的朋友有所帮助。同时，我也希望通过这些内容，能够与你们建立良好的互动和交流，相互学习和提高。</p>\n<p>最后，我也想告诉读者们，这个博客是我个人的一个小小的窗口。<strong>我会不断地更新我的文章和内容，希望能够与读者们共同成长和进步</strong>。如果你对我的博客有什么建议或意见，欢迎随时与我联系，我会非常乐意听取并改进。</p>\n<p><strong>感谢支持和关注，期待与你们的互动和交流！😄</strong></p>\n",
      "image": "https://wuiyan.github.io/assets/images/cover0.jpg",
      "date_published": "2023-04-12T00:00:00.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "随笔"
      ]
    },
    {
      "title": "提问的智慧",
      "url": "https://wuiyan.github.io/posts/2023-08-18-01.html",
      "id": "https://wuiyan.github.io/posts/2023-08-18-01.html",
      "summary": "原文版本历史 (https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/history.md) 目录 声明 (#%E5%A3%B0%E6%98%8E); 简介 (#%E7%AE%80%E4%BB%8B); 在提问之前 (#%E5%9C%A8%E6%8F%90...",
      "content_html": "<h1> 提问的智慧</h1>\n<h2> <a href=\"https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/history.md\" target=\"_blank\" rel=\"noopener noreferrer\">原文版本历史</a></h2>\n<h2> 目录</h2>\n<ul>\n<li><a href=\"#%E5%A3%B0%E6%98%8E\">声明</a></li>\n<li><a href=\"#%E7%AE%80%E4%BB%8B\">简介</a></li>\n<li><a href=\"#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D\">在提问之前</a></li>\n<li><a href=\"#%E5%BD%93%E4%BD%A0%E6%8F%90%E9%97%AE%E6%97%B6\">当你提问时</a>\n<ul>\n<li><a href=\"#%E6%85%8E%E9%80%89%E6%8F%90%E9%97%AE%E7%9A%84%E8%AE%BA%E5%9D%9B\">慎选提问的论坛</a></li>\n<li><a href=\"#stack-overflow\">Stack Overflow</a></li>\n<li><a href=\"#%E7%BD%91%E7%AB%99%E5%92%8C-irc-%E8%AE%BA%E5%9D%9B\">网站和 IRC 论坛</a></li>\n<li><a href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8\">第二步，使用项目邮件列表</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A1%AE%E7%9A%84%E6%A0%87%E9%A2%98\">使用有意义且描述明确的标题</a></li>\n<li><a href=\"#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D\">使问题容易回复</a></li>\n<li><a href=\"#%E7%94%A8%E6%B8%85%E6%99%B0%E3%80%81%E6%AD%A3%E7%A1%AE%E3%80%81%E7%B2%BE%E5%87%86%E4%B8%94%E8%AF%AD%E6%B3%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%AF%AD%E5%8F%A5\">用清晰、正确、精准且语法正确的语句</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98\">使用易于读取且标准的文件格式发送问题</a></li>\n<li><a href=\"#%E7%B2%BE%E7%A1%AE%E5%9C%B0%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%B9%B6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9\">精确地描述问题并言之有物</a></li>\n<li><a href=\"#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE\">话不在多而在精</a></li>\n<li><a href=\"#%E5%88%AB%E5%8A%A8%E8%BE%84%E5%A3%B0%E7%A7%B0%E6%89%BE%E5%88%B0-bug\">别动辄声称找到 Bug</a></li>\n<li><a href=\"#%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%E4%B8%8D%E8%83%BD%E4%BB%A3%E6%9B%BF%E4%BD%A0%E7%9A%84%E5%8A%9F%E8%AF%BE\">低声下气不能代替你的功课</a></li>\n<li><a href=\"#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E9%9D%9E%E4%BD%A0%E7%9A%84%E7%8C%9C%E6%B5%8B\">描述问题症状而非你的猜测</a></li>\n<li><a href=\"#%E6%8C%89%E5%8F%91%E7%94%9F%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E5%88%97%E5%87%BA%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6\">按发生时间先后列出问题症状</a></li>\n<li><a href=\"#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B\">描述目标而不是过程</a></li>\n<li><a href=\"#%E5%88%AB%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E7%94%B5%E9%82%AE%E5%9B%9E%E5%A4%8D\">别要求使用私人电邮回复</a></li>\n<li><a href=\"#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A1%AE%E7%9A%84%E8%A1%A8%E8%BE%BE%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82\">清楚明确的表达你的问题以及需求</a></li>\n<li><a href=\"#%E8%AF%A2%E9%97%AE%E6%9C%89%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E6%97%B6\">询问有关代码的问题时</a></li>\n<li><a href=\"#%E5%88%AB%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E7%9A%84%E9%97%AE%E9%A2%98%E8%B4%B4%E4%B8%8A%E6%9D%A5\">别把自己家庭作业的问题贴上来</a></li>\n<li><a href=\"#%E5%8E%BB%E6%8E%89%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%A5\">去掉无意义的提问句</a></li>\n<li><a href=\"#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A0%87%E9%A2%98%E5%86%99%E7%B4%A7%E6%80%A5\">即使你很急也不要在标题写紧急</a></li>\n<li><a href=\"#%E7%A4%BC%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%E8%80%8C%E4%B8%94%E6%9C%89%E6%97%B6%E8%BF%98%E5%BE%88%E6%9C%89%E5%B8%AE%E5%8A%A9\">礼多人不怪，而且有时还很有帮助</a></li>\n<li><a href=\"#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%90%8E%E5%8A%A0%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E\">问题解决后，加个简短的补充说明</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E7%AD%94%E6%A1%88\">如何解读答案</a>\n<ul>\n<li><a href=\"#rtfm-%E5%92%8C-stfw%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8%E4%BA%86\">RTFM 和 STFW：如何知道你已完全搞砸了</a></li>\n<li><a href=\"#%E5%A6%82%E6%9E%9C%E8%BF%98%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82\">如果还是搞不懂</a></li>\n<li><a href=\"#%E5%A4%84%E7%90%86%E6%97%A0%E7%A4%BC%E7%9A%84%E5%9B%9E%E5%BA%94\">处理无礼的回应</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E8%B4%A5%E8%80%85\">如何避免扮演失败者</a></li>\n<li><a href=\"#%E4%B8%8D%E8%AF%A5%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98\">不该问的问题</a></li>\n<li><a href=\"#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A0%A2%E9%97%AE%E9%A2%98\">好问题与蠢问题</a></li>\n<li><a href=\"#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94\">如果得不到回答</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98\">如何更好地回答问题</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90\">相关资源</a></li>\n<li><a href=\"#%E9%B8%A3%E8%B0%A2\">鸣谢</a></li>\n</ul>\n<h2> 声明</h2>\n<p>许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：</p>\n<p><strong>本指南不提供此项目的实际支持服务！</strong></p>\n<p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p>\n<p>如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p>\n<h2> 简介</h2>\n<p>在<a href=\"http://www.catb.org/~esr/faqs/hacker-howto.html\" target=\"_blank\" rel=\"noopener noreferrer\">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p>\n<p>不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<strong>好事</strong>；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p>\n<p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，\"好问题！\"是诚挚的大力称赞。</p>\n<p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p>\n<p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p>\n<p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p>\n<p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p>\n<p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p>\n<p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p>\n<p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p>\n<p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href=\"esr@thyrsus.com\">esr@thyrsus.com</a> 或 <a href=\"respond-auto@linuxmafia.com\">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href=\"http://www.ietf.org/rfc/rfc1855.txt\" target=\"_blank\" rel=\"noopener noreferrer\">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p>\n<h2> 在提问之前</h2>\n<p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p>\n<ol>\n<li>尝试在你准备提问的论坛的旧文章中搜索答案。</li>\n<li>尝试上网搜索以找到答案。</li>\n<li>尝试阅读手册以找到答案。</li>\n<li>尝试阅读常见问题文件（FAQ）以找到答案。</li>\n<li>尝试自己检查或试验以找到答案。</li>\n<li>向你身边的强者朋友打听以找到答案。</li>\n<li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li>\n</ol>\n<p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p>\n<p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 <a href=\"http://groups.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Google 论坛</a>和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p>\n<p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p>\n<p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p>\n<p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p>\n<p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p>\n<p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p>\n<h2> 当你提问时</h2>\n<h3> 慎选提问的论坛</h3>\n<p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p>\n<ul>\n<li>在与主题不合的论坛上贴出你的问题。</li>\n<li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li>\n<li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li>\n<li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li>\n</ul>\n<p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p>\n<p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p>\n<p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。</p>\n<p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p>\n<p>别像机关枪似的一次\"扫射\"所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p>\n<p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p>\n<p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p>\n<p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p>\n<h3> Stack Overflow</h3>\n<p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p>\n<p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p>\n<p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p>\n<p>Stack Exchange 已经成长到<a href=\"http://stackexchange.com/sites\" target=\"_blank\" rel=\"noopener noreferrer\">超过一百个网站</a>，以下是最常用的几个站：</p>\n<ul>\n<li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li>\n<li>Stack Overflow 是问写程序有关的问题。</li>\n<li>Server Fault 是问服务器和网管相关的问题。</li>\n</ul>\n<h3> 网站和 IRC 论坛</h3>\n<p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p>\n<p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 \"用<strong>我们的</strong>版本\"。</p>\n<p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p>\n<p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p>\n<p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p>\n<h3> 第二步，使用项目邮件列表</h3>\n<p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p>\n<ul>\n<li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li>\n<li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li>\n<li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li>\n<li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li>\n</ul>\n<p>如果一个项目既有\"使用者\" 也有\"开发者\"（或\"黑客\"）邮件列表或论坛，而你又不会动到那些源代码，那么就向\"使用者\"列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p>\n<p>然而，如果你<strong>确信</strong>你的问题很特别，而且在\"使用者\" 列表或论坛中几天都没有回复，可以试试前往\"开发者\"列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p>\n<p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p>\n<h3> 使用有意义且描述明确的标题</h3>\n<p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p>\n<p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p>\n<blockquote>\n<p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p>\n</blockquote>\n<blockquote>\n<p>聪明问题：<a href=\"http://X.org\" target=\"_blank\" rel=\"noopener noreferrer\">X.org</a> 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p>\n</blockquote>\n<blockquote>\n<p>更聪明问题：<a href=\"http://X.org\" target=\"_blank\" rel=\"noopener noreferrer\">X.org</a> 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p>\n</blockquote>\n<p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 <a href=\"http://X.org\" target=\"_blank\" rel=\"noopener noreferrer\">X.org</a> 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p>\n<p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p>\n<p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p>\n<p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p>\n<p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p>\n<p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p>\n<h3> 使问题容易回复</h3>\n<p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href=\"http://linuxmafia.com/faq/Mail/muas.html\" target=\"_blank\" rel=\"noopener noreferrer\">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p>\n<p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p>\n<h3> 用清晰、正确、精准且语法正确的语句</h3>\n<p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p>\n<p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p>\n<p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it's</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href=\"http://en.wikipedia.org/wiki/Alan_Cox\" target=\"_blank\" rel=\"noopener noreferrer\">Alan Cox</a> 也许可以这样做，但你不行）。</p>\n<p>更白话的说，如果你写得像是个半文盲[译注：<a href=\"http://zh.wikipedia.org/wiki/%E5%B0%8F%E7%99%BD\" target=\"_blank\" rel=\"noopener noreferrer\">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href=\"http://zh.wikipedia.org/wiki/%E7%81%AB%E6%98%9F%E6%96%87\" target=\"_blank\" rel=\"noopener noreferrer\">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p>\n<p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p>\n<p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：\n[译注：以下附上原文以供使用]</p>\n<blockquote>\n<p>English is not my native language; please excuse typing errors.</p>\n</blockquote>\n<ul>\n<li>英文不是我的母语，请原谅我的错字或语法。</li>\n</ul>\n<blockquote>\n<p>If you speak $LANGUAGE, please email/PM me;\nI may need assistance translating my question.</p>\n</blockquote>\n<ul>\n<li>如果你说<strong>某语言</strong>，请寄信/私讯给我；我需要有人协助我翻译我的问题。</li>\n</ul>\n<blockquote>\n<p>I am familiar with the technical terms,\nbut some slang expressions and idioms are difficult for me.</p>\n</blockquote>\n<ul>\n<li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li>\n</ul>\n<blockquote>\n<p>I've posted my question in $LANGUAGE and English.\nI'll be glad to translate responses, if you only use one or the other.</p>\n</blockquote>\n<ul>\n<li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li>\n</ul>\n<h3> 使用易于读取且标准的文件格式发送问题</h3>\n<p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p>\n<ul>\n<li>使用纯文字而不是 HTML (<a href=\"http://archive.birdhouse.org/etc/evilmail.html\" target=\"_blank\" rel=\"noopener noreferrer\">关闭 HTML</a> 并不难）。</li>\n<li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li>\n<li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li>\n<li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li>\n<li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li>\n<li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li>\n<li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li>\n<li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li>\n</ul>\n<p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p>\n<h3> 精确地描述问题并言之有物</h3>\n<ul>\n<li>仔细、清楚地描述你的问题或 Bug 的症状。</li>\n<li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li>\n<li>描述在提问前你是怎样去研究和理解这个问题的。</li>\n<li>描述在提问前为确定问题而采取的诊断步骤。</li>\n<li>描述最近做过什么可能相关的硬件或软件变更。</li>\n<li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li>\n</ul>\n<p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p>\n<p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p>\n<p><a href=\"http://www.chiark.greenend.org.uk/~sgtatham/\" target=\"_blank\" rel=\"noopener noreferrer\">Simon Tatham</a> 写过一篇名为《<a href=\"http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p>\n<h3> 话不在多而在精</h3>\n<p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p>\n<p>这样做的用处至少有三点。\n第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；\n第二，简化问题使你更有可能得到<strong>有用</strong>的答案；\n第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p>\n<h3> 别动辄声称找到 Bug</h3>\n<p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p>\n<p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href=\"#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D\">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p>\n<p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p>\n<p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p>\n<h3> 低声下气不能代替你的功课</h3>\n<p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p>\n<p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p>\n<p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p>\n<h3> 描述问题症状而非你的猜测</h3>\n<p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p>\n<p><strong>蠢问题</strong></p>\n<blockquote>\n<p>我在编译内核时接连遇到 SIG11 错误，\n我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p>\n</blockquote>\n<p><strong>聪明问题</strong></p>\n<blockquote>\n<p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），\n256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，\n但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。\n所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p>\n</blockquote>\n<p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p>\n<h3> 按发生时间先后列出问题症状</h3>\n<p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p>\n<p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p>\n<p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p>\n<h3> 描述目标而不是过程</h3>\n<p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p>\n<p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p>\n<p><strong>蠢问题</strong></p>\n<blockquote>\n<p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p>\n</blockquote>\n<p><strong>聪明问题</strong></p>\n<blockquote>\n<p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），\n但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p>\n</blockquote>\n<p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p>\n<h3> 别要求使用私人电邮回复</h3>\n<p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p>\n<p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p>\n<p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p>\n<h3> 清楚明确的表达你的问题以及需求</h3>\n<p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p>\n<p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p>\n<p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p>\n<p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p>\n<h3> 询问有关代码的问题时</h3>\n<p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p>\n<p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href=\"#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE\">话不在多而在精</a>一节）。</p>\n<p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p>\n<p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p>\n<h3> 别把自己家庭作业的问题贴上来</h3>\n<p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p>\n<p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p>\n<h3> 去掉无意义的提问句</h3>\n<p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p>\n<p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p>\n<p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p>\n<p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href=\"http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html\" target=\"_blank\" rel=\"noopener noreferrer\">是或否类型的回答</a>。</p>\n<h3> 即使你很急也不要在标题写<code>紧急</code></h3>\n<p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p>\n<p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p>\n<p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p>\n<p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p>\n<h3> 礼多人不怪，而且有时还很有帮助</h3>\n<p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p>\n<p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p>\n<p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p>\n<p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p>\n<h3> 问题解决后，加个简短的补充说明</h3>\n<p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p>\n<p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p>\n<p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p>\n<p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p>\n<p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p>\n<p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p>\n<p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p>\n<p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p>\n<h2> 如何解读答案</h2>\n<h3> RTFM 和 STFW：如何知道你已完全搞砸了</h3>\n<p>有一个古老而神圣的传统：如果你收到<code>RTFM （Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p>\n<p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 <a href=\"http://lmgtfy.com/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Google 是你的朋友</strong></a>！）</p>\n<p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p>\n<p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p>\n<ul>\n<li><strong>你需要的信息非常容易获得</strong>；</li>\n<li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li>\n</ul>\n<p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p>\n<h3> 如果还是搞不懂</h3>\n<p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p>\n<p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p>\n<h3> 处理无礼的回应</h3>\n<p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p>\n<p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p>\n<p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p>\n<p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。</p>\n<p>Jeff Bigler 的观察总结和这个相关也值得一读 (<a href=\"http://www.mit.edu/~jcb/tact.html\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>tact filters</strong></a>)。</p>\n<p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p>\n<h2> 如何避免扮演失败者</h2>\n<p>在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p>\n<p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p>\n<p>熬过去，这很正常。事实上，它是有益健康且合理的。</p>\n<p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p>\n<p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p>\n<p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p>\n<p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p>\n<p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p>\n<p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p>\n<p>也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p>\n<h2> 不该问的问题</h2>\n<p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p>\n<p>问题：<a href=\"#q1\">我能在哪找到 X 程序或 X 资源？</a></p>\n<p>问题：<a href=\"#q2\">我怎样用 X 做 Y？</a></p>\n<p>问题：<a href=\"#q3\">如何设定我的 shell 提示？</a></p>\n<p>问题：<a href=\"#q4\">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p>\n<p>问题：<a href=\"#q5\">我的程序/设定/SQL 语句没有用</a></p>\n<p>问题：<a href=\"#q6\">我的 Windows 电脑有问题，你能帮我吗？</a></p>\n<p>问题：<a href=\"#q7\">我的程序不会动了，我认为系统工具 X 有问题</a></p>\n<p>问题：<a href=\"#q8\">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p>\n<p>问题：<a href=\"#q9\">我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</a></p>\n<hr>\n<blockquote>\n<p>问题：我能在哪找到 X 程序或 X 资源？</p>\n</blockquote>\n<p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href=\"http://www.google.com\" target=\"_blank\" rel=\"noopener noreferrer\">Google</a> 吗？</p>\n<blockquote>\n<p>问题：我怎样用 X 做 Y？</p>\n</blockquote>\n<p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p>\n<blockquote>\n<p>问题：如何设定我的 shell 提示？？</p>\n</blockquote>\n<p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href=\"#RTFM\">RTFM</a>，然后自己去找出来。</p>\n<blockquote>\n<p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p>\n</blockquote>\n<p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p>\n<blockquote>\n<p>问题：我的{程序/设定/SQL 语句}不工作</p>\n</blockquote>\n<p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p>\n<ul>\n<li>你还有什么要补充的吗？</li>\n<li>真糟糕，希望你能搞定。</li>\n<li>这关我屁事？</li>\n</ul>\n<blockquote>\n<p>问题：我的 Windows 电脑有问题，你能帮我吗？</p>\n</blockquote>\n<p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p>\n<p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p>\n<blockquote>\n<p>问题：我的程序不会动了，我认为系统工具 X 有问题</p>\n</blockquote>\n<p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p>\n<blockquote>\n<p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p>\n</blockquote>\n<p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href=\"http://www.linux.org/groups/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">这儿</a>找到使用者群组的清单）。</p>\n<p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p>\n<blockquote>\n<p>问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</p>\n</blockquote>\n<p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p>\n<h2> 好问题与蠢问题</h2>\n<p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p>\n<p><strong>蠢问题</strong>：</p>\n<blockquote>\n<p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p>\n</blockquote>\n<p>这种问法无非想得到 <a href=\"#RTFM\">STFW</a> 这样的回答。</p>\n<p><strong>聪明问题</strong>：</p>\n<blockquote>\n<p>我用 Google 搜索过 \"Foonly Flurbamatic 2600\"，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p>\n</blockquote>\n<p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p>\n<p><strong>蠢问题</strong>：</p>\n<blockquote>\n<p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p>\n</blockquote>\n<p>他觉得都是别人的错，这个傲慢自大的提问者。</p>\n<p><strong>聪明问题</strong>：</p>\n<blockquote>\n<p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p>\n</blockquote>\n<p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p>\n<p><strong>蠢问题</strong>：</p>\n<blockquote>\n<p>我的主机板有问题了，谁来帮我？</p>\n</blockquote>\n<p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p>\n<p><strong>聪明问题</strong>：</p>\n<blockquote>\n<p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p>\n</blockquote>\n<p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p>\n<p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p>\n<p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p>\n<p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p>\n<p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p>\n<p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p>\n<h2> 如果得不到回答</h2>\n<p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p>\n<p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p>\n<p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p>\n<p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p>\n<p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p>\n<p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p>\n<h2> 如何更好地回答问题</h2>\n<p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p>\n<p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p>\n<p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p>\n<p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p>\n<p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p>\n<p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p>\n<p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。</p>\n<p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p>\n<p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p>\n<p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p>\n<h2> 相关资源</h2>\n<p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href=\"http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/\" target=\"_blank\" rel=\"noopener noreferrer\">Unix 系统和网络基本原理</a>。</p>\n<p>当你发布软件或补丁时，试着按<a href=\"http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">软件发布实践</a>操作。</p>\n<h2> 鸣谢</h2>\n<p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>\n",
      "image": "https://images.unsplash.com/photo-1562141989-a764b5668046?crop=entropy&cs=tinysrgb&fit=crop&fm=jpg&h=300&ixid=MnwxfDB8MXxyYW5kb218MHx8YXNrfHx8fHx8MTY5MjMyOTA3OQ&ixlib=rb-4.0.3&q=80&utm_campaign=api-credit&utm_medium=referral&utm_source=unsplash_source&w=800",
      "date_published": "2023-08-18T10:00:00.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "转载"
      ]
    },
    {
      "title": "如何做出伟大工作",
      "url": "https://wuiyan.github.io/posts/2023-08-18-02.html",
      "id": "https://wuiyan.github.io/posts/2023-08-18-02.html",
      "summary": "如何做出伟大工作 英文原文 How to Do Great Work DISCLAMER 原文中可以整理为列表的内容我都进行了整理，而没有遵循原文。 把注解融入进了正文。 一些原文有被删除。 自行划分了段落，并添加了标题。",
      "content_html": "<h1> 如何做出伟大工作</h1>\n<p><a href=\"http://paulgraham.com/greatwork.html\" target=\"_blank\" rel=\"noopener noreferrer\">英文原文 How to Do Great Work</a></p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">DISCLAMER</p>\n<ol>\n<li>原文中可以整理为列表的内容我都进行了整理，而没有遵循原文。</li>\n<li>把注解融入进了正文。</li>\n<li>一些原文有被删除。</li>\n<li>自行划分了段落，并添加了标题。</li>\n</ol>\n</div>\n<p>如果你收集了很多不同领域内做出伟大工作的技巧列表，那么这些列表的交集会是什么样子呢？我决定亲自动手制作它来寻找答案。\n我部分的目的是制作一份可以供任何领域的工作者使用的指南。但我也对这个交集的形态感到好奇。创作这篇指南的过程表明，这个交集确实有一个明确的形态；它不仅仅是一个被标记为“努力工作”的点。\n以下的方法假设你有很大的雄心壮志：</p>\n<h1> 0. <strong>总览</strong></h1>\n<p>关于伟大工作的定义：伟大工作意味着把重要的事情做得非常出色，从而拓展了人们的想象空间。但请注意“出色”并没有明确的界限，这是一个程度问题，并且在当时难以被判断。因此作者觉得与其担心人们是否觉得某事重要，不如专注在发展自身的兴趣爱好上。只要努力去做一件了不起的事，至于是否成功，就留给后人去评说吧。</p>\n<p>做出伟大工作的步骤：</p>\n<ol>\n<li>选择一个领域。</li>\n<li>充分学习以到达这个领域的前沿。</li>\n<li>注意到领域中的空缺之处。</li>\n<li>选择有潜力的空缺，进行探索。</li>\n</ol>\n<p>步骤 2 和 4 需要努力工作，其中兴趣是让你超越一般勤奋的关键。三个最有力的动机：好奇心，愉悦，做出令人印象深刻之事的渴望（好胜心）。</p>\n<p>关于步骤 1，选择领域的依据：</p>\n<ol>\n<li>你对此有天生的才华。</li>\n<li>你对此深深感兴趣。</li>\n<li>它为伟大的工作提供了足够的空间。</li>\n</ol>\n<p>第 3 点一般无需过于操心，即使是充满野心的人也会保守估计一个领域的潜在发展空间。因此关键是找到你有天分和感兴趣的领域。</p>\n<p>确定适合你的领域本身就是一项重要工作。如果你对此还没有明确的想法，那就多尝试。即便是错误也有其价值。犯错误还可以加深你对不同领域的理解，从不同领域的交叉中，往往能够带来重大的发现。</p>\n<p>因此，你需要培养进行个人项目的习惯。个人项目并不意味着是他人分派的工作，即便你的项目是某个更大项目的一部分，你也要确保你能够主导自己的项目部分。你应该确保你的项目野心勃勃，并且让你感到激动，项目可以让你激动是最重要的。令人激动的好奇心是伟大工作的动力和方向。</p>\n<p>关于步骤 3，寻找缝隙的几个建议：</p>\n<ol>\n<li>对大多数人习以为常的事情提出质疑。</li>\n<li>对质疑做出解答，如果你发现答案有些奇怪，那么这是一件好事。</li>\n<li>大胆追逐奇怪想法，特别是人们不关心的那些。如果你的经验足够让你有把握地判断出这些想法被人们小瞧了，那这就是你能找到的最好赌注。</li>\n</ol>\n<p>最大的奖赏莫过于，从看似完整的知识体系中发现一个空缺，撬开它，里面是一个完整的世界。</p>\n<h1> 1. <strong>选择领域</strong></h1>\n<blockquote>\n<p>对步骤 1 的拓展：如何选择一个领域。</p>\n</blockquote>\n<h2> 1.1. 选择的困境</h2>\n<p>首先要明白，探索本身有其双刃剑的特性，当你在探索一个领域时，以下四件事情在同时发生：</p>\n<ol>\n<li>你在一项工作上花费数年时间去了解自己是否喜欢它。</li>\n<li>你在一项工作上花费数年时间去了解你是否擅长它。</li>\n<li>你放弃了去做其他工作的机会。</li>\n<li>你放弃了去了解其他工作的机会。</li>\n</ol>\n<p>因此，在最坏的情况下：尽管你非常努力地探索，你仍然可能基于不完整的信息做出一个过晚的选择。</p>\n<p>进一步扩展上述过程：探索并不是找到当前的你，和当前已知问题中的哪一个更加匹配；而是找到探索完成时的你，和探索完成时的一系列问题中哪个更匹配。因此可供探索的空间是非常巨大的，理论上其等于未来所有可能的工作，加上未来所有可能的你，形成的巨大组合。</p>\n<p>既然你没有办法搜索这一整个空间，那你只能依赖某种启发，选择一些看上去有潜力的道路，来探索这个空间，并期望好的匹配结果都聚集在空间中的某一处。当然，很多时候事情并不会这样。</p>\n<p>其次，志向也会恶化这个选择问题。有两种志向：一种先于兴趣出现；另一种则是随着你对某物的兴趣增加，而慢慢出现。大多数人的志向是这两种的混合，前一种志向占比越高的人，就越难做出选择。</p>\n<p>再者，你要明白大多数国家的教育系统会误导你认为选择是很轻松的事情。他们会期待你在对一个领域真正了解之前就对它做出承诺。因此，那些不按照教育系统预设的轨道行动、走在更优路径上的人，往往会被视为失败者。</p>\n<p>因此，在选择探索方向时，教育系统不会给你什么帮助。请记住：要想知道你该做什么，只能靠你自己。</p>\n<h2> 1.2. 跟随兴趣</h2>\n<p>选择一个领域很难，但一昧的等待也不会解决问题。你需要采取行动，但这并没有通用的解决方案可以供你遵循。人物传记可能揭示的一个重要因素是运气的作用，你需要使自己成为运气的目标，比如尝试许多事情、结识许多人、阅读许多书籍、提出许多问题。通过广撒网，好奇心强的人更有可能在一开始就找到合适的工作。</p>\n<p>在多个选择面前感到困惑时，优先考虑你对哪个更感兴趣。你对一个领域了解越多，就应该越感兴趣，反正，那么这个领域可能并不适合你。并且你需要明白，如果你的兴趣与大多数人不同，这其实是一件好事，奇怪的品味通常表示你有强烈的兴趣，而强烈的兴趣让你在工作上高效。特别是那些别人觉得无聊或可怕的事情，你却觉得它们很有趣。</p>\n<p>请记住，你选择的领域并非人，对它们没有必要忠诚。如果你发现你对另一个领域更感兴趣，就不要害怕切换。</p>\n<p>当你开始制作某些东西时，确保它们是人们真正需要的，而不是你想象中的受众所需要的。最好的方式是制作你自己想要的东西。遵循“令人兴奋”规则，让你兴奋的东西显然就是你想要的东西。</p>\n<p>请注意：如果你认为你的受众不如你成熟或精明世故，那么为他们制作东西是危险的。你可以通过这种方式赚到很多钱，但这不是通往伟大工作的道路。</p>\n<p>装腔作势、追随时尚、恐惧、金钱、政治、他人的期待、名誉等都可能使你在寻找目标的路上迷失。但只要你始终保持对真正感兴趣的事物的追求，你就能抵御它们的影响。</p>\n<h2> 1.3. 少做计划</h2>\n<p>跟随兴趣并不是一个被动策略，它往往意味着需要克服各种困难，面对被拒绝和失败的风险。因此跟随兴趣需要有一定的勇气和果敢。</p>\n<p>但当你需要勇气时，你并不需要制定详细的计划：只需要在令人兴奋的雄心勃勃的项目上努力工作，好的结果自然就会出现。与其详细计划并执行，不如只保持一些关键的因素不变，只要保证你的工作或项目在追求中不会偏离正确的方向即可。</p>\n<p>计划只适合对可以提前预见的成就，比如赢得金牌或者富裕。但对于像发明和发现一类的伟大成就，单纯的计划并无法达成。</p>\n<p>对大多数想要创造伟大成就的人来说，正确的策略并不是制定过多的计划，而是在每一个阶段都去做看上去最有趣的事情，并能为你的未来提供最佳选项的事情。\"顺势而为\"，这就是大部分创造伟大成就的人如何实现的。</p>\n<h1> 2. 努力工作</h1>\n<blockquote>\n<p>步骤 2 和 4 需要努力工作，本章是对努力工作的进一步说明。</p>\n</blockquote>\n<p>努力工作总会遇到各种困难，因此如何努力工作也是有技巧的。</p>\n<h2> 2.1. 开始工作</h2>\n<ol>\n<li>不要工作得太辛苦，这会导致收益递减，对一些最难的工作，一天工作四五个小时就够了。</li>\n<li>尽量安排出连续的大块时间来工作。</li>\n<li>为了开始工作，你可以欺骗自己任务并没有那么难。这不是你的性格缺陷，而是工作的本质导致的：开始工作需要的能量大于保持工作状态需要的能量。通常我们不能为了做出伟大的工作就欺骗自己，但这是一个罕见的特殊情况，这么做并不算欺骗。</li>\n<li>开始一个新项目也是类似的，在开始前故意低估所需的工作量是合理的。年轻人在这方面有优势，他们更乐观，即使他们的乐观有时源于对工作的无知。但在开始工作这件事上，无知有时反而胜过过多的知识。</li>\n<li>一旦开始，尽管可能比预期的工作量更大，你也要努力完成它。许多项目中最好的工作往往会在预计的最后阶段出现。</li>\n<li>你还可以告诉自己你正在做的事情非常重要，如果这能帮你发现新的东西，那么这就不算是欺骗自己。</li>\n</ol>\n<h2> 2.2. 重视拖延</h2>\n<p>拖延有两种：每日工作的拖延和项目上的拖延。项目上的拖延非常危险，如果你一年一年地推迟启动重要的项目，那就是在以年为单位拖延，你会无法完成许多事情。我们往往会高估一天内能做的事情，低估自己花费几年可以做到的事情。那么同理，我们也会高估一天内拖延的严重性，而低估拖延几年的严重性。</p>\n<p>每日的拖延可以被及时发现，但你很可能无法发现项目上的拖延。甚至有一种项目上的拖延会伪装成你的每日工作，这是拖延项目危险的原因之一，你太忙了，以至于注意不到自己在拖延。</p>\n<p>一个好办法是周期性地停下来，然后问自己：“我是否在做我当前最想完成的工作？”，当你年轻时这个答案可以是“不是”，但随着年龄增大，这个否定的答案就会越危险。</p>\n<p>通常你不能直接从你做的事情上获得报酬，特别是在早期。这时有两个选项：</p>\n<ol>\n<li>通过做类似的事情得到报酬，并期望把两件事推得更近；但记住这是一种妥协。</li>\n<li>或者做完全不同的工作获得报酬，并兼职做自己的项目；缺点是你需要争取时间去做自己想做的事。</li>\n</ol>\n<p>两个方法都可行，也有各自的缺点。</p>\n<h2> 2.3. 全情投入</h2>\n<p>为了完成伟大工作，你需要花费大多数人看起来不合理的时间。你不能把这些时间当作你的成本，不然这成本看上去就过高了。你需要找到那些可以让你全情投入的工作。</p>\n<p>有些工作可能需要你先花费数年时间在你并不喜欢的事情上，然后才有好的结果，但伟大工作不是这样实现的。要实现伟大工作，持续专注于你真正感兴趣的事情上。当你停下来回顾，你会惊讶自己已经走了这么远。</p>\n<p>我们会惊讶，是因为我们低估了工作的累积效应。这就是全情投入的关键：持续。做大事的人不会每天都做很多事，但他们每天都会完成一些事情，而不是无所事事。</p>\n<p>如果你做的工作具有复利效应，那你会获得指数级别的增长。大多数人无意识完成了复利积累，但这值得我们停下来思考一些什么工作具备这样的特性。例如，学习是一个例子，你对某个东西了解得越多，学习的速度就越快；粉丝群体的增长也是一个例子，你的粉丝越多，他们就会为你吸引更多的新粉丝。</p>\n<p>指数增长的问题在于，它在开始时的增长感觉很平缓，即使它未来的增长会呈指数级别，但我们并不能直观地感受到这一点，这导致我们在早期会低估它。</p>\n<p>指数增长的事物是如此有价值，它们值得我们付出非凡的努力去启动。但由于我们在早期会低估指数增长，这种指数增长的启动通常是无意识完成的：有的人是因为知道学习新东西总需要最初的努力；有的人则是因为别无他法。如果人们能意识到指数增长值得投资，那么会有更多的人这么做。</p>\n<h2> 2.4. 走神</h2>\n<p>工作并不仅仅在你专心致志的时候进行，走路，洗澡，或者躺在床上时，漫无目的的思考也很强大。一些困难在认真解决时十分棘手，但在走神时，你反而会发现解决方案。</p>\n<p>不过，你必须以正常的方式努力工作，才能从这种现象中受益。你不能只是走来走去做白日梦。白日梦必须与刻意的工作交织在一起，先从工作中找到问题，再试图从白日梦中找到灵感。</p>\n<p>如果你安排得当，你的生活就会自动实现 \"专注-放松 \"的循环。最完美的安排是你在办公室工作，并步行往返。</p>\n<p>每个人都知道在工作的时候要避免分心，但在走神时也同样需要避免分心。往往一个人走神时，会先想到当下最关心的事情。如果走神抢走了你对工作的关心，那这就是分心，避免把思考浪费在分心上。（例外：不要避开让你分心的爱）</p>\n<h2> 2.5. 做到最好</h2>\n<p>在你的专业领域中，你需要主动培养自己的品味，只有清楚什么是最好的，以及为什么是最好的，你才能确切地知道自己的目标是什么。</p>\n<p>你应该追求做到最好，因为如果你不这么做，你甚至可能达到好的标准。其原因可能包括以下几点：</p>\n<ol>\n<li>即使在雄心勃勃追求最好的过程中犯错，你也会错在正确的方向——大部分没能击中目标的炮弹并不是错在瞄准上。</li>\n<li>追求成为最好与仅仅追求成为好质量上有着本质的不同。</li>\n<li>“做到好”这个目标可能过于模糊。</li>\n</ol>\n<p>考虑到一些不谙世事的人会不自觉地做出伟大工作，把做到最好的规则扩展到这种情况，那就成了：要么做到最好，要么不做。</p>\n<p>同时，追求最好有一种规模效应。虽然你可能觉得尝试做到最好是一项沉重的负担，但实际上你经常会发现自己因此得到了更多。在某种程度上，尝试做到最好甚至比仅仅做到好要简单。</p>\n<p>一种设定高目标的方式是去尝试创造一些百年之后人们仍然会关心的事物。因为百年之后仍然被认为是好的事物，更有可能是真正好的事物。</p>\n<h2> 2.6. 避免做作</h2>\n<p>做作就是模仿他人。你可能为了模仿出的魅力感到满足，但是这种虚假感往往最终会暴露在你的工作中。</p>\n<p>想要成为别人对年轻人是最大的诱惑，但是你无需担心这个问题，只要你致力于一个有足够雄心的项目，这个问题就会自然得到解决。你只需去做，你的身份就会随之形成。</p>\n<h2> 2.7. <strong>真诚</strong></h2>\n<p>“避免做作”的积极表述就是保持真诚。真诚不仅避免了做作，还让我们远离一系列类似的恶习。</p>\n<p>真诚的优势：</p>\n<ol>\n<li>只有足够真诚，我们才能更加深入地观察到事物的真相，看见更多事实，从而得到更多的新想法。</li>\n<li>真诚有助于我们在进行重要工作时，容忍和适应各种变形和扭曲。</li>\n</ol>\n<p>如何保持真诚：</p>\n<ol>\n<li>积极地愿意承认自己的错误，一旦你承认错误，你就从错误的负担中解脱出来。</li>\n<li>不要在意形式，这样可以让我们更专注于重要的事情，保持儿童般天真无邪的勇敢尽管困难，但却非常重要。</li>\n<li>保持乐观，即使这有时可能让你看起来像个傻瓜。如果你想发现新的东西，向人们分享你的想法要远胜于保持沉默。</li>\n</ol>\n<p>对第一点，承认错误的扩展：有一些不容置疑的信念是没问题的，但这个信念必须是不可证伪的。比如说，“法律应该平等对待每一个人”的原则是安全的，因为句子中的 \"应该 \"并不是对世界的真实陈述，因此很难被推翻。如果没有证据可以推翻你的某项原则，那么你就不可能为了维护它而忽略任何事实。</p>\n<h2> 2.8. 如一</h2>\n<p>伟大的作品不仅与创作者一致，而且与作品本身一致。这通常都是一脉相承的。因此，如果你在创作过程中面临抉择，不妨问问哪种选择更具有一致性。</p>\n<p>下面有几个情景和一致性相关：</p>\n<ul>\n<li>取舍：去繁化简；</li>\n<li>发现；</li>\n<li>创造：尝试用最普遍的方法表达自己。</li>\n</ul>\n<p>你可能会不得不舍弃一些东西，然后重做，想要保持现状和懒惰会让你拒绝重做，为了克服这种情况，不妨问问自己：如果我已经做出了改变，我是否会想要回到当前的状态？要有信心做取舍，不要因为你为之感到自豪、或者因为你在上面花费了太多精力，就把一些不合适的东西留着。</p>\n<p>事实上，在一些工作上，将所做事情剥离到本质是有好处的：</p>\n<ul>\n<li>结果会变得更加集中；</li>\n<li>你会对此更加了解；</li>\n<li>从事物的本质出发，你很难欺骗自己。</li>\n</ul>\n<p>关于此还能推导出一个概念：”优雅“，优雅是一个长线投资。相比之下，费力的解决方案往往在短期内更有声望。它们耗费大量精力，而且难以理解，这两点都会给人留下深刻印象，至少是暂时的。</p>\n<p>当你发现很难说自己是在创造还是在发现时，这通常是一个好苗头。许多优秀作品看起来不费吹灰之力，某种意义上，它不需要被创造，只需要被看见。如果你要在创造与发现之间做选择，选择发现那一边。想象你只是一个单纯的管道，而思想通过这个管道自然形成。</p>\n<p>（奇怪的是，一个例外是你选择要研究的问题。这通常看上去像是搜索，但在最好的情况下，这像是创造什么东西。你在探索的过程中创造了这个领域。）</p>\n<p>类似地，当你尝试创造一个强大的工具时，要尽可能地减少对其使用的限制。强大的工具几乎都会被用于你无法预料的方式，所以应当倾向于消除限制，即使你并不清楚这样做的好处是什么。</p>\n<p>伟大的工作总是像工具一样，可以被他人用来搭建其他东西。因此当你在创造其他人可以使用的想法，揭露他人可以回答的问题时，这些都是好的信号。好的想法在不同领域都能发挥作用。</p>\n<p>如果你用最普遍的方法表达自己的想法，它们会比你想表达的更加真实诚恳。</p>\n<h1> 3. 产生想法</h1>\n<blockquote>\n<p>对步骤 3 的扩展：注意到领域中的空缺之处。</p>\n</blockquote>\n<p>当然，仅有 \"真实 \"是不够的。伟大的想法必须是真实的、新颖的。即使你已经学到了足够的知识，到达了知识的前沿，也需要一定的能力才能看到新的想法。我们给这种能力取名为原创性、创造力和想象力，我们可能有很多所谓的“技术能力”，但在找到新想法上可能没有太多能力。</p>\n<p>很多人或许被误导了，原创性不是一个过程，而是一个习惯。具有独创性思维的人无论专注于什么，都会产生新的想法，就像角磨机产生火花一样。</p>\n<p>一些可以帮助你产生”原创性“想法的方式：</p>\n<ol>\n<li>当你在实际操作某件事，或者尝试理解某个稍显困难的事物时，你更容易产生创新的想法。</li>\n<li>将你感兴趣的东西写出来，有些思考和创新想法只能通过将想法写下来才能产生。</li>\n<li>改变你的环境，去一个新的地方，甚至只是简单地出去散步都可能激发你的新想法。</li>\n<li>广泛涉猎不同的主题，你接触的主题越多，可能产生的新想法也就越多。这样既可以让你从不同角度看问题，也可以把不同主题进行类比。但是，不要把精力均匀分散在所有主题上。对少数几个话题保持专业好奇心，对更多话题保持闲暇好奇心。这有点类似把注意力按照幂律分布。</li>\n<li>好奇心和原创性紧密相关，你的问题有多少好奇心，你的回答就有多少原创性。</li>\n</ol>\n<h2> 3.1. 发现错误观念</h2>\n<p>产生新想法通常是一个发现一直就在你眼前的事物的过程。一旦你发现了一个新的想法，它往往显得十分明显。那为什么之前没人想到过这个呢？</p>\n<p>当一个主意看上去同时新颖和明显，这可能是一个好想法。</p>\n<p>发现显而易见的事情听起来很简单。然而，从经验上来看，产生新想法却很难。这其中的矛盾在于：</p>\n<ol>\n<li>看见新想法需要你改变看世界的方法。我们通过不同的观念看待世界，这既帮助了我们，也限制了我们。</li>\n<li>当你修正了一个错误的观念，新的想法就会显得十分明显。然而，发现并修正错误的观念却很困难。</li>\n</ol>\n<p>因此，新的想法既显而易见，又难以被发现：只有当你完成一项困难的任务后，这些想法才会显得易于理解。</p>\n<p>发现错误观念的一种方法就是比其他人更为严谨。错误的观念会在与现实冲突的地方留下痕迹，但大多数人并不想看到这些痕迹。他们过于依赖现有的观念，以至于无论这些痕迹在事后看起来多么明显，他们都会倾向于忽视它们。</p>\n<p>为了发现新想法，你需要主动发现并关注那些错误或者问题的迹象，而不是选择回避。这就是爱因斯坦做到的。他之所以能看到麦克斯韦方程所带来的巨大可能性，更多的是因为他对问题的敏锐觉察和追求严谨，而非仅仅是在寻找新想法。</p>\n<p>另一个修复错误观念的方法是敢于打破规则。听起来很矛盾，但如果你想改变你对世界的理解，那么做一个乐于打破规则的人会有所帮助。从旧观念来看，新的观念通常会打破一些隐含的规则。</p>\n<p>很少有人理解打破规则的难度，因为新的观念一旦成功，它看起来会比旧的观念更保守。一旦你采用了由他人带来的新观念，这个新观念看起来就显得完全合理。然而，新观念在初次被提出时并非如此，日心说就花费了大半个世纪才被广泛接受，即使是在天文学家中，也是因为它当时看起来太错误了。</p>\n<p>实际上，如果你仔细考虑，大多数人认为不好的新想法才可能是好想法，否则别人早就去探索它了。因此，你应该寻找看似疯狂，但可能是正确的想法。如何辨别这些想法呢？这没有确定的方法。往往看起来不好的想法就是不好的，但是看似疯狂却可能是正确的想法通常会让人感到兴奋，因为它们暗含了丰富的含义；而那些仅仅是坏的想法往往让人感到沮丧。</p>\n<p>习惯于打破规则有两种方式：</p>\n<ol>\n<li>积极地独立思考，也就是喜欢打破规则。这类人通常很淘气，规则无法阻止他们；反而，打破规则给了他们额外的能量。</li>\n<li>被动地独立思考，也就是对规则漠不关心，甚至可能不知道它们的存在。这就是为什么新手和外来者经常能发现新事物；他们的无知成为了一种被动的独立思考，让他们忽略了某一领域的常识。患有阿斯伯格综合征（社交互动和非语言交流障碍、局限的兴趣和重复的行为）的人也似乎对传统观念有一种免疫性。</li>\n</ol>\n<p>严谨性和打破规则听起来像是一个奇怪的组合。在大众文化中，它们被视为是对立的，这样观念是错误的。大众文化默认的是，这些问题都是微不足道的，在微不足道的问题上，严谨性和打破规则确实是对立的。但在真正重要的问题上，只有打破规则的人才能做到真正的严谨。</p>\n<h2> 3.2. 被低估的想法</h2>\n<p>一个被低估的想法往往要被掂量一段时间才会被丢掉。在你的潜意识中，你确实看到了它，但你潜意识中的另一部分却把它否决了，因为它太奇怪、太冒险、太费事、太有争议。这就提出了一个令人兴奋的可能性：如果你能关掉这些潜意识筛选，你就能看到更多的新想法。</p>\n<p>方法之一是思考哪些想法适合别人去探索，这样你的潜意识就不会为了保护你免受批评或困难而否定这些想法。</p>\n<p>你也可以从另一个方向来发现被忽视的想法：从遮蔽它们的东西入手。每一个被珍视但却错误的原则周围，都有一个由有价值的想法组成的 \"死角\"，这些想法因为与原则相悖而未被发掘。</p>\n<p>宗教是人们所珍视但却错误的原则的集合。因此，任何可以从字面上或隐喻上被描述为宗教的东西，都会在其阴影下蕴藏着宝贵的未被探索的思想。哥白尼和达尔文都有过这样的发现。</p>\n<p>你所在的领域中，有哪些原则是人们过于依赖，甚至近乎“信仰”的存在？这些原则真的像人们认为的那样理所当然吗？如果你放弃这些原则，又会怎样？</p>\n<h2> 3.3. 被忽视的问题</h2>\n<p>人们在解决问题时展现出的原创性，远高于他们在选择解决哪些问题时所展现的。即使是最聪明的人，在决定研究什么问题时也会出奇地保守。那些从不想变得时髦的人，却会被时髦的问题吸引。</p>\n<p>人们在选择问题时比选择解决方案更保守，原因之一是问题的赌注更大。一个问题可能会困扰你数年，而探索一个解决方案可能只需要几天。但我还是觉得人们过于保守，这种保守不仅仅是因为人们在应对风险，而更多地是受流行的影响。冷门的问题被低估了。</p>\n<p>最有趣的冷门问题之一是那些被认为已完全探索，但实际上并未完全探索的问题。伟大的工作常常是挖掘已经存在事物的潜力。例如杜勒和瓦特。因此，如果你对别人认为已被挖掘殆尽的领域感兴趣，不要让他们的怀疑阻挡你。人们对此经常是错误的。</p>\n<p>在一个冷门问题上工作可以非常愉悦：没有炒作，也无需着急；投机者和批评家都忙于其他地方；现有的工作具有老派的坚实性；此外，培养这些原本会被浪费的冷门想法，给人一种经济上的满足感。</p>\n<p>但是，最常见的一种被忽视的问题并不是明显的不合时宜。它只是看起来并不重要，而实际上却很重要。如何发现这些问题？通过自我放纵——追随自己的好奇心，至少暂时抛开你脑中那个说你只应该研究 \"重要 \"问题的小声音。</p>\n<p>你确实需要关注重要问题，但大多数人对重要问题的定义过于保守。如果周围有被忽视的重要问题，它可能已在你的潜意识雷达上。试着问自己：如果你暂停“严肃”的工作，去做有趣的事情，你会选择什么？答案可能比看起来更重要。</p>\n<p>选择问题的原创性甚至比解决问题的原创性更重要。这区分了那些能发现全新领域的人。因此，起始阶段容易被忽略的一步——决定研究什么——其实是伟大工作的关键所在。</p>\n<h2> 3.4. 先有问，后有答</h2>\n<p>很少有人能理解这一点。人们对新思想最大的误解之一，是其构成中问题与答案的比例。人们认为大创意就是答案，但真正的见解往往在问题中。</p>\n<p>我们低估问题的部分原因在于学校使用问题的方式。在学校里，问题往往只是在得到答案之前短暂存在，之后便消失无踪。但真正的好问题远不止于此。一个真正的好问题是一个局部的发现。新物种是如何产生的？使物体坠落地球的力与使行星保持在其轨道上的力是否相同？即使提出这样的问题，你也已经进入了令人兴奋的新领域。</p>\n<p>随身携带未解之谜会让人感到不舒服。但是，你带着的问题越多，你就越有可能注意到问题的解决方法，或者更令人兴奋的是，你可能会注意到两个未解之谜是一样的。</p>\n<p>有时，你会带着一个问题很久。伟大工作往往来自于你多年前——甚至在你的童年时代——第一次注意到的问题，你就是会情不自禁地思考它。人们常说要保持年轻时的梦想，但保持年轻时的问题同样重要。</p>\n<p>试着写下你年轻时疑惑的问题清单，也许是个不错的练习。你可能会发现自己现在有能力为其中的一些问题做些什么。</p>\n<p>这也是实际专家与公众心目中专家的一大不同：在公众的想象中，专家总是确定无疑的。但实际上，你对重要问题的困惑越多，你就越有可能成为真正的专家，前提是这些问题是重要的，并且其他人也不了解。</p>\n<p>想象一下，在新的想法诞生的前一刻会发生什么。往往一个拥有足够专业知识的人对某个问题产生了困惑。这就意味着，创新性的一部分来自于困惑——来自于混淆！你必须对充满未知的世界充满好奇，勇于面对问题，但你不能因为习惯了疑惑就放弃寻找答案。</p>\n<p>一个拓展：原创性和不确定性之间的联系导致了一种奇怪的现象，由于墨守成规的人比独立思考的人更有把握，这往往会让他们在争论中占上风，尽管他们一般都比较愚蠢。“最好的人缺乏信念，而最差的人却充满激情。“</p>\n<p>拥有众多尚未解决的问题是一件很棒的事情。这就像富人越来越富，因为获取新问题的最佳方式就是尝试回答现有的问题。问题不仅可以引领我们找到答案，还能引发更多的问题。</p>\n<h1> 4. 探索问题</h1>\n<blockquote>\n<p>对步骤 4 的扩展：选择有潜力的空缺，进行探索。</p>\n</blockquote>\n<p>最好的问题是在回答中成长起来的。你可能在现有的理论体系中发现了一个待解的疑问，然后试着去拉它，它就会变得越来越长。因此，在尝试回答问题之前，不要要求问题明显很大。你很少能预测到这一点。注意到这些疑问本身就已经足够困难了，更不用说去预测你将会揭示出什么样的新东西。</p>\n<p>最好是充满好奇心——多尝试去解答一些疑问，看看会发生什么。大事始于小事。大事的最初版本往往只是实验、副项目或会谈，然后发展成更大的事情。所以，要从很多小事做起。</p>\n<p>多产的价值常常被低估。你尝试的事物越多，你发现新知识的机会就越大。但请理解，大量尝试也意味着大量的失败。好的想法必然伴随着大量的糟糕想法。</p>\n<p>尽管先深入研究已有的知识成果看起来更为谨慎，但直接去尝试将会让你学得更快，也更有趣。当你尝试后再去看已有的成果，你会对其有更深的理解。因此，选择去尝试而非只是学习。当你能从小事开始，这一切就变得更简单了。快速开始和从小事做起，这两个理念就像拼图一样，能完美结合在一起。</p>\n<p>如何从小做起，做成大事？答案是：不断迭代。伟大的事物几乎都是通过不断迭代产生的。你从小处着手，不断改进，最终的版本会比你计划中的任何版本都更巧妙和有野心。</p>\n<p>当你为人们创造产品时，迭代制作就尤为重要了——快速向人们展示一个初版，然后根据他们的反馈进行改进。</p>\n<p>首先，尝试最简单的方法。出乎意料的是，它往往会奏效。如果行不通，这至少可以让你开始尝试。</p>\n<p>在任何一个版本中都不要试图加入太多新的元素。有一些例子：</p>\n<ol>\n<li>有人花费太长时间进行第一个版本的开发（最终效果却并不满意）。</li>\n<li>第二系统效应：即第一版成功后，第二版试图引入过多的新功能而导致失败。</li>\n</ol>\n<p>新项目的早期版本有时会被人们视为玩具并忽视，这其实是一个好兆头。这意味着它已经具备了新创意需要的所有元素，只不过规模还不够大，但这总会随着时间发展而来。这也有利于你面对批评：攻击一个项目是 \"玩具\"，就好比攻击一个声明是 \"不恰当的\"。这意味着，再有实质性的批评也无法坚持下去。</p>\n<p>与从小事做起、逐步演进的方法相对的是提前详细规划你要做的事。规划通常看起来更为负责任。说出“我们要先做X，然后是Y，最后是Z”听起来比“我们先尝试做X，看看会有什么发生”要来得有条理，但这往往效果不佳。</p>\n<p>规划本身并不好。有时它是必要的，但它是必要之恶，是对无情条件的一种回应。你不得不这样做：要么你受到了某些客观条件的限制，而你无法改变这些条件；或者是因为你需要协调很多人的工作。如果你的项目规模不大，且外界条件相对灵活，你就不需要做太多的计划，你的设计反而可以不断发展。</p>\n<h2> 4.1. 承担风险</h2>\n<p>承担你能承受的风险。在一个有效市场中，风险与回报成正比，因此不要追求确定性，而要追求高预期价值的赌注。如果你不是偶尔失败，那可能是你太保守了。</p>\n<p>虽然保守主义通常与老年人联系在一起，但年轻人才容易犯这种错误。经验不足让他们惧怕风险，但正是年轻的时候最能承受风险。</p>\n<p>即使是失败的项目，也可能是有价值的。在项目进行的过程中，你会越过很少有人见过的领域，遇到很少有人问过的问题。而问题的最佳来源，可能莫过于你在尝试做一件稍显困难的事情时遇到的情况。</p>\n<h2> 4.2. 年轻人的优势</h2>\n<p>当你年轻时，要充分利用年轻的优势，而当你年长了，也可以运用年长者的优势。年轻人的优势在于活力、时间、乐观和自由，而年长者的优势则体现在知识、效率、财富和权力。努力可以让你在年轻时获得年长者的优势，也可以让你在年长时保持年轻人的优势。</p>\n<p>年长者的另一个优势是清楚了解自己具有哪些优势，而年轻人则常常未意识到这些。在这其中最大的优势可能是时间。将时间转化为优势的最好办法，就是以一种略微轻浮的方式来使用时间：出于好奇去了解一些你不需要了解的东西；或者尝试建造一些东西，只是因为这样做很酷；或者在某些方面变得异常出色。</p>\n<p>在“以一种略微轻浮的方式来使用时间”这句话中，\"略微\"是一个重要的限定词。在年轻的时候轻浮地使用时间，并不代表简单地浪费它。做一些可能是浪费时间的事情，和做一些你肯定是浪费时间的事情，其实是有很大区别的。前者至少是一个赌注，甚至可能更好。</p>\n<p>通过问一问自己是在创造还是在消费，你可以判断当前是否在浪费时间。比如，编写电脑游戏比玩电脑游戏更有价值，而在玩游戏的过程中创造一些东西，比仅仅玩游戏更有价值。</p>\n<p>年轻，或者更准确地说，缺乏经验，最微妙的优势在于你能以全新的眼光看待一切。当你的大脑第一次接受一个想法时，有时两者并不能完美地结合在一起。通常问题出在你的大脑上，但偶尔也会出在想法上。这个想法中可能有一部分不太合理，而习惯了这个想法的人可能已经学会了忽略这个问题，但是你有机会不去忽视它。</p>\n<p>另一个相关的优势是，如果你还没有公开发表任何观点，你就不会倾向于支持你之前的观点。只要你足够真诚，你就可以在这方面保持初心，但很少有人能做到这一点。</p>\n<p>因此，当你第一次学习某样东西时，要注意那些看起来不对或遗漏的地方。你会很想忽略它们，因为有 99% 的可能问题出在你自己身上。为了继续学习，你可能不得不暂时放下你的疑虑。但不要忘记它们。当你深入研究这个主题后，回来看看它们是否还在。如果你现有的知识仍然不能解决这些疑虑，那么它们很可能代表了一种未被发现的想法。</p>\n<h2> 4.3. 清除错误观念</h2>\n<p>从经验中获得的最有价值的知识之一，就是知道什么是不用担心的。年轻人知道所有可能重要的事情，但不知道它们的相对重要性。因此，他们对所有事情都同样担心，而他们应该对少数几件事情担心得更多，对其他事情则几乎不担心。</p>\n<p>但是，你不知道的事情只是缺乏经验问题的一半。另一半问题是你知道的事情并非如此。成年后，你的脑袋里装满了错误观念——你养成的坏习惯和别人教给你的错误的东西——要想做出伟大的工作，你需要清除这些错误的观念，至少是清除那些和你想要从事工作相关的错误观念。</p>\n<p>大多数的错误观念是学校留给我们的。潜意识上我们习惯于把上学和学习等同起来，然而学校有许多奇怪的特性，这些特性可能会扭曲我们对学习和思考的理解。</p>\n<p>比如：</p>\n<ol>\n<li>学校诱导被动。从你小时候开始，就有一个权威在教室前面告诉你们要学什么，然后衡量你们是否做到了。但无论是上课还是考试，都不是学习的本质；它们只是学校通常设计方式的产物。越早克服这种被动性越好。如果你还在上学，试着把你的学生生涯看作你的个人项目，你的老师是为你服务的，而不是相反。这似乎有点夸张，但这不仅仅是一个奇怪的思想实验。在经济上，这是事实；在最好的情况下，在理智上也是事实。最好的老师并不想成为你的老板。他们更希望你勇往直前，把他们当作建议的来源，而不是被他们牵着鼻子走。</li>\n<li>学校也会让你对工作产生误解。在学校里，他们会告诉你问题是什么，而这些问题几乎总是可以用你目前所学到的知识来解决。而在现实生活中，你必须找出问题所在，而且往往根本不知道问题是否可以解决。</li>\n<li>但学校对你做的最糟糕的事情，也许就是训练你通过破解考试来取胜。这样做是做不成大事的。你无法欺骗上帝。不要再寻找这种捷径了。真正打破现有规则的方式是专注于那些被忽视的问题和解决方案，而不是敷衍了事。</li>\n</ol>\n<p>除了学校带来的错误观念，还有一些错误观念也应该被避免：</p>\n<p>不要认为你需要依赖某些“关键人物”来给你一个“重大突破”。即便这种可能性存在，获得这个突破的最好办法仍然是专注于出色的工作，而不是追逐有影响力的人。</p>\n<p>不把评审团的拒绝放心上。给面试官和评奖委员会留下印象深刻的品质，与做出杰出工作所需要的品质往往是不同的。评审团的决定只有在它们构成反馈系统的一部分时才有意义，而这种情况十分罕见。</p>\n<h2> 4.4. 抄袭</h2>\n<p>进入一个新领域的人常常会抄袭现有工作，这本质上没有错，因为尝试复现是了解其工作原理的最佳途径。原创并不意味着完全避免旧思想，而在于有没有新想法。</p>\n<p>抄袭有好与坏之分。如果要抄袭，请公开而不是秘密或下意识地进行，以免自己盲目跟随别人。如果你做得够好，抄袭会是使你领先他人的优势，而不是落后于他人的劣势。</p>\n<p>很多领域的早期工作都是基于他人的，这是不可避免的。在他人的工作上开展工作，会被看作缺乏独创性，在自己的工作上开展则不会，但其实这两者没有结构性上的不同。有时，最新颖的想法一开始看起来缺乏原创性，就连发明者都说这是已有事物的变体，因为对新发现的概念词汇还未形成。</p>\n<p>一种最强大的抄袭是把一个领域的东西拷贝到另一个领域。历史上充满了这种偶然的发现，所以特意学习一些其他领域是值得的。如果你擅长象征和比喻，可以从一个毫不相干的领域获取灵感。</p>\n<p>抄袭确实存在风险，如盲目复制过时的内容。模仿时不要复制每个特点，特别是那些今天看起来荒谬的。一些你欣赏的特点可能是缺陷，最容易模仿的特点可能正是缺陷。</p>\n<p>当你模仿他人行为的时候，这个道理就更对了。一些有天赋的人同时也是混蛋，有时未经世事的人会觉得成为混蛋是成为天才的一部分。这不是，天才只是他们没有受到惩罚的原因。</p>\n<p>负面示例同样有启示作用，有时候从失败中学到的更多，缺失时你可能才会意识到某些东西的必要性。</p>\n<h2> 4.5. 同伴</h2>\n<p>如果你所在领域有许多优秀的人都聚集在一个地方，那么去那个地方参观一段时间通常是一个好想法。这会增加你的雄心壮志，同时你发现他们也是普通人，你的自信也会增加。</p>\n<p>作者故意将“一个地方”模糊表述，暗示这个地方可以是任何有优秀人士聚集的地方，不仅限于物理空间。在本文成文时，物理空间的优势难以被复制，但未来这点可能会改变。</p>\n<p>如果你足够真诚，你会得到比你预期更热烈的欢迎。大多数擅长某事的人会很乐意与真正感兴趣的人谈论。他们可能把自己的工作视为一种爱好，而爱好者总是喜欢与人分享自己的兴趣。</p>\n<p>但是，要找到真正擅长的人你需要付出一些努力。伟大工作的声望之高，有时会在某些地方，特别是大学里，会让你产生一种每个人都在从事它的幻觉。这种情况并非真实。大学内部的人不会公开评论，但不同院系的工作质量有着极大的差异。有的院系有人正在做出伟大工作；有的院系曾经有过；有的院系则从未有人取得过卓越成就。</p>\n<p>找到最好的同伴。有很多项目无法一个人完成，即使你做的项目可以一个人完成，有其他人来鼓励你，和你意见碰撞也是好事。</p>\n<p>同伴不仅影响你的工作；他们还会影响你。所以和你想成为的人一起工作，因为你最终会成为他们。</p>\n<p>在同伴中，质量比数量更重要。与其拥有一大堆不错的同伴，不如有一两个卓越的同伴。事实上，这不仅仅是更好，而是非常必要。从历史上看：伟大工作往往发生在一些特定的群体，这暗示你身边的同伴常常决定你能否做出伟大工作。</p>\n<p>你如何知道你身边有足够好的同伴呢？根据我的经验，当你身边有了足够好的同伴，你自然就知道了。这也就意味着，如果你不确定，这就代表你大概率没有。但我会尝试着给出一个更明确的回答：足够好的同伴会提供让你惊讶的观点。他们可以看见你看不到的东西，做到你完不成的事情。如果你有一些同伴足以让你时刻保持警觉和最佳状态，那你大概已经有足够好的同伴了。</p>\n<p>我们中的大多数可以从与他人合作中受益，但一些项目需要大量的人力，一些人并不适合做这件事。如果你需要进行大量人力的项目，你大概率会变成一个管理者，并且管理像其他类型的工作一样，需要天赋和兴趣。如果你没有天赋和兴趣，那么这是一个二选一的问题：你要么强迫你自己学习管理，直到管理成为了你的第二语言；要么避免这样的项目。</p>\n<p>当人们可以做的事情非常有限时，大量人力的项目可以不需要管理，比如 SETI<a href=\"/home\">@home</a> （一项利用全球联网的计算机共同搜寻地外文明(SETI)的科学实验计划）和比特币。这一类工作通过严格的协议和更自由的节点操作，扩大了领域规模。</p>\n<h2> 4.6. 士气 I</h2>\n<p>注重你的士气。当你在开展一个野心勃勃的项目时，士气是一切的基础。你需要像对待一个生命一样，培养和保护它。</p>\n<p>士气始于你的人生观。如果你是一个乐天派，那么你更可能做出伟大工作；如果你觉得自己很幸运，而不是觉得自己是一个受害者，那么你也更可能做出伟大工作。</p>\n<p>实际上，工作一定程度可以保护你，让你不受个人问题的打扰。如果你选择的工作很纯粹，它的难题会是你每日生活难题的避难所。如果说这是逃避主义，那这也是逃避主义具有生产力的一面，这也是被历史上许多伟大思想使用的逃避主义。</p>\n<p>高昂的士气助你做好工作，好的工作成果又反馈提振士气。这是一个正向循环。但反之亦然，工作不佳会打击士气，进一步影响工作。当你遇挫时，转向更简单的工作也是策略之一，它能助你重新找到成就感。</p>\n<p>雄心勃勃的人会犯下的最大错误之一就是让一次挫折摧毁他所有的士气，就像扎破气球一样。给自己打预防针，把挫折当作进展的一部分。解决困难的问题总是会有挫折的。</p>\n<p>做伟大工作是一种深度优先搜索，其根节点是 \"渴望\"。因此，\"如果一开始没有成功，那就尝试，再尝试 \"并不完全正确。应该是 如果一开始没有成功，要么再试一次，要么倒回去再试一次。</p>\n<p>\"永不言弃 \"也不太对。很明显，有时放弃是正确的选择。更准确的说法应该是：永远不要让挫折让你惊慌失措，使你不得不走回头路。进一步说：即使放弃一个节点，也不要放弃搜索的根结点，不要放弃你的渴望。</p>\n<p>如果工作很吃力，并不一定是坏兆头，就像跑步时气喘吁吁也不是坏兆头一样。这取决于你跑得有多快。因此，要学会区分好的疼痛和坏的疼痛。好的疼痛是努力的表现，坏的疼痛是受损的表现。</p>\n<h2> 4.7. 士气 II</h2>\n<p>受众是保持士气的关键。无论是学者的同行，还是艺术界的观众，受众不必太多。因为受众的价值并不完全随其数量增加。这对名人来说可能不是好消息，但对初出茅庐的人来说，意味着有一个小而忠实的受众就可以支撑你前行。只要有一小部分人真心支持你，那就已经足够。</p>\n<p>尽量减少与受众之间的中间环节。虽然某些工作中这是无法避免的，但如果能够直接与受众交流会给你带来更大的自由。例如，如果你可以创造某种避免中间人、直接与受众互动的方式，那肯定是个好选择。</p>\n<p>与你共度时光的人对你的士气也有很大影响。有的人能带给你正能量，有的则相反。你需要聚集那些给你带来正能量的人，并远离那些消耗你能量的人。但如果有人需要你照顾，那自然是首要任务。</p>\n<p>选择一个理解和支持你工作的伴侣是非常重要的。如果你充满雄心壮志，工作对你来说就像是必需品。所以，选择一个不能支持你工作的伴侣，无异于是选择了一个不真正了解或关心你的人。</p>\n<p>身体健康对于士气也至关重要。你需要通过身体来思考和工作，所以保持身体健康是基础。定期锻炼、合理饮食、良好的作息以及远离有害药物都很重要。尤其是跑步和散步，不仅有助于锻炼，还利于思考。固定的锻炼路线可以帮助你更集中地思考。</p>\n<p>做出伟大工作的人不一定比其他人更幸福，但他们至少比那些没有尝试的人更幸福。对于那些聪明且雄心壮志的人来说，不努力尝试是一种危险，因为那会让他们逐渐变得痛苦和失望。</p>\n<h2> 4.8. 指标</h2>\n<p>有一些指标可以用来评价你的工作：</p>\n<ol>\n<li>你所尊重的人的评价。向别人展示自己的能力是可以的，但要选择对的人。你尊重的人的评价是信号。而名声，即更大群体的评价，你可能会尊重，也可能不会，但它只会带来更多的噪音。</li>\n<li>工作的声望。一种工作的声望在最好的情况下也只是一个滞后指标，有时甚至是完全错误的。如果你把任何事情做得非常好，你就可以使其变得有声望。因此，对于一个工种的问题不是它有多大的声望，而是它可以做得多好。</li>\n<li>竞争。竞争可以是一种强大的动力，但不要让它决定你的目标；不要因为看到别人在追求某些东西就盲目跟随。实际上，除了更努力之外，不要让竞争者决定你要做的具体事情。</li>\n<li>好奇心。好奇心是最佳的向导。你的好奇心永远不会误导你，并且它比你更知道哪些事情值得关注。</li>\n</ol>\n<h1> 5. 结尾</h1>\n<p>注意“好奇心”这个词在本文中的出现频率。如果你向一位先知询问做出伟大工作的秘诀，并且他只用一个词回答你，我敢肯定，他会说“好奇心”。</p>\n<p>这并不意味着可以直接被当作建议。仅仅拥有好奇心是不足够的，你也不能强迫自己或他人产生好奇心。但你可以去培养它，让它成为你的动力。</p>\n<p>好奇心是做出伟大工作的四个关键步骤的核心：它会帮你找到你的兴趣领域；引领你到达该领域的前沿；帮你发现其中的空缺；并激发你去深入探究。整个过程可以被视为与好奇心的一场舞蹈。</p>\n<p>不管你信不信，我真的尽力让这篇文章变得简短。但它的长度至少起到了筛选的作用。如果你走到现在这一步，你一定对做出伟大的工作充满兴趣。而如果真的如此，你已经走得比你可能意识到的更远了，因为真正想要这样做的人实际上并不多。</p>\n<p>完成伟大工作的关键因素包括：能力、兴趣、努力和运气。运气是你无法控制的，所以我们可以不考虑它。如果你真的想完成伟大的工作，那么你肯定会付出相应的努力。因此，问题的核心是能力与兴趣。你能找到一个能够让你的能力和兴趣结合并产生海量新想法的工作领域吗？</p>\n<p>对此，我们有乐观的理由。有很多不同的方式可以完成伟大的工作，还有更多的方法尚待发掘。在所有这些不同类型的工作中，你最适合的那种可能与你的特质有着夸张地、超出预期的吻合。关键是能否找到它，以及你的能力和兴趣能让你在这个领域走多远。而这个问题，只有通过实践才能得到答案。</p>\n<p>想要完成伟大工作的人，远超于真正付诸实践的人。阻碍他们前进的，是他们的谦逊与恐惧。试图成为下一个牛顿或莎士比亚，听起来似乎过于傲慢，且困难重重。如果你决意如此尝试，可能会面临失败。事实上，很少有人会明确地思考是否应该追求伟大的工作，大多数人是在潜意识中回避这个问题。</p>\n<p>因此，我要提醒你一下：你真的想要做伟大的工作吗？现在，你需要明确地做出选择。对不起让你面临这种选择，但我们都知道，你已经产生了兴趣。</p>\n<p>不要因为怕被视为傲慢而犹豫。你不必向任何人宣告你的抱负。即使事情变得异常艰难，甚至以失败告终，又有何妨？有很多人面临着比这更为严重的问题。事实上，如果这是你遇到的最大问题，那么你已经很幸运了。</p>\n<p>的确，你需要付出极大的努力。但许多人都在为他们的目标而努力。如果你正在做的事情真的让你兴趣盎然，那么相比于许多同龄人的日常工作，你的任务或许会显得更为有趣，甚至更轻松。</p>\n<p>那些伟大的发现就在那里，等待着有人去探索、去挖掘。为何那个人不能是你呢？</p>\n",
      "image": "https://images.unsplash.com/photo-1580474524060-088d96ba3974?crop=entropy&cs=tinysrgb&fit=crop&fm=jpg&h=300&ixid=MnwxfDB8MXxyYW5kb218MHx85Lyf5aSnfHx8fHx8MTY5MjMyOTAzMA&ixlib=rb-4.0.3&q=80&utm_campaign=api-credit&utm_medium=referral&utm_source=unsplash_source&w=800",
      "date_published": "2023-08-18T11:00:00.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "转载"
      ]
    },
    {
      "title": "如何使用GithubAction自动部署VuePress到GithubPages",
      "url": "https://wuiyan.github.io/posts/2023-08-18-03.html",
      "id": "https://wuiyan.github.io/posts/2023-08-18-03.html",
      "summary": "如何使用GithubAction自动部署VuePress到GithubPages 提示 仓库名称必须严格按照 [你的GitHub用户名].github.io 格式来 否则会将网站部署到以仓库名称命名的子路径上 打开 repo 控制权限 依次进入仓库的 Settings=&gt;Action=&gt;General 打开以下两个权限：",
      "content_html": "<h1> 如何使用GithubAction自动部署VuePress到GithubPages</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">提示</p>\n<p>仓库名称必须严格按照 <code>[你的GitHub用户名].github.io</code> 格式来</p>\n<p>否则会将网站部署到以仓库名称命名的子路径上</p>\n</div>\n<h2> 打开 repo 控制权限</h2>\n<p>依次进入仓库的 Settings=&gt;Action=&gt;General</p>\n<p><strong>打开以下两个权限：</strong></p>\n<p>Workflow Permissions:</p>\n<ul class=\"task-list-container\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-0\" checked=\"checked\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-0\"> Read and write permissions</label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-1\" checked=\"checked\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-1\"> Allow GitHub Actions to create and approve pull requests</label></p>\n</li>\n</ul>\n<h2> 编写Github WorkFlow配置文件</h2>\n<p>文件 <code>.github/workflows/deploy-github-pages.yml</code></p>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>配置完成后应该会自动开始构建，在actions里可以看到构建详情，失败会显示原因\n以后每次push都会自动构建部署</p>\n<h2> 配置GitHub Pages</h2>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>等待上一步action执行成功，再进行这一步</p>\n</div>\n<p>打开 Settings 中的 Pages 页面</p>\n<p>Source 选择 Deploy From Branch</p>\n<p>Branch 选择 gh-pages 然后save即可</p>\n<p>Pages 的构建流程这时应该会自动启动，等待几分钟，Pages 页面顶部就会显示部署成功后的域名啦。</p>\n<h2> <strong>完🎉</strong></h2>\n",
      "image": "https://images.unsplash.com/photo-1618401479427-c8ef9465fbe1?crop=entropy&cs=tinysrgb&fit=crop&fm=jpg&h=300&ixid=MnwxfDB8MXxyYW5kb218MHx8Z2l0aHVifHx8fHx8MTY5MjM0OTIxMA&ixlib=rb-4.0.3&q=80&utm_campaign=api-credit&utm_medium=referral&utm_source=unsplash_source&w=800",
      "date_published": "2023-08-18T15:00:00.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "技术"
      ]
    },
    {
      "title": "防火墙常用命令",
      "url": "https://wuiyan.github.io/posts/Centos7%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html",
      "id": "https://wuiyan.github.io/posts/Centos7%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html",
      "summary": "启动|关闭|重启防火墙 systemctl status firewalld.service # 查看防火墙状态 systemctl start firewalld.service # 启动防火墙 systemctl stop firewalld.service # 关闭防火墙",
      "content_html": "<h5> 启动|关闭|重启防火墙</h5>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 防火墙配置命令</h5>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 附录</h5>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-03-15T22:54:45.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "JUL日志框架",
      "url": "https://wuiyan.github.io/posts/JUL%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "id": "https://wuiyan.github.io/posts/JUL%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "summary": "一、JUL框架介绍 JUL 全称 : Java util logging ，Java原生的日志框架，主要用于小型项目，使用方便。 作用：可以按照不同的层次分级去显示信息，将程序运行中的信息更加规范化的输出。 二、JUL组成介绍 Logger：也被称作记录器，是日志实现的基础。 Handler|Appenders：也被称作处理器，一个 Logger 可同时存在多个处理器，以其具体实现类决定日志的输出位置是控制台、文件还是网络上的其他日志服务器。 Layouts：也被称为Formatters，它负责对日志事件中的数据进行转换和格式化，它决定了日志记录的最终显示形式。 Level：日志输出级别，Logger 和 Handeler 都有一个 Level 级别，如两者出现冲突时，以级别高的等级为准。 Filters：过滤器，可以自主过滤掉不需要的日志信息，可以在 Logger 和 Handeler 上分别设置。",
      "content_html": "<h4> 一、JUL框架介绍</h4>\n<p>JUL 全称 : Java util logging ，Java原生的日志框架，主要用于小型项目，使用方便。</p>\n<p>作用：可以按照不同的层次分级去显示信息，将程序运行中的信息更加规范化的输出。</p>\n<h4> 二、JUL组成介绍</h4>\n<ul>\n<li><strong>Logger</strong>：也被称作记录器，是日志实现的基础。</li>\n<li><strong>Handler</strong>|Appenders：也被称作处理器，一个 Logger 可同时存在多个处理器，以其具体实现类决定日志的输出位置是控制台、文件还是网络上的其他日志服务器。</li>\n<li><strong>Layouts</strong>：也被称为Formatters，它负责对日志事件中的数据进行转换和格式化，它决定了日志记录的最终显示形式。</li>\n<li><strong>Level</strong>：日志输出级别，Logger 和 Handeler 都有一个 Level 级别，如两者出现冲突时，以级别高的等级为准。</li>\n<li><strong>Filters</strong>：过滤器，可以自主过滤掉不需要的日志信息，可以在 Logger 和 Handeler 上分别设置。</li>\n</ul>\n<figure><img src=\"/assets/images/JUL/流程图.png\" alt=\"流程图\" tabindex=\"0\" loading=\"lazy\"><figcaption>流程图</figcaption></figure>\n<h4> 三、日志等级划分</h4>\n<p>在JUL中日志被划分为七个等级，由高到低分别为：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>还有两个特殊等级 OFF和ALL，OFF用于关闭日志记录，ALL用于启用所有的消息日志记录。</p>\n<p>需注意，虽然日志等级被分为了七个等级，<strong>但默认只显示INFO及以上等级。</strong></p>\n<h4> 四、日志框架的基础使用</h4>\n<p>1、获取当前类的 logger 对象</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2、输出日志信息</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 五、日志框架的自定义配置</h4>\n<p>对于JUL日志框架来说，可以设定其日志输出等级，日志处理器类型，输出日志格式，过滤器配置。</p>\n<p>可以通过两种方式去设置：程序中设置和配置文件设置，文件设置是比较常用且方便的格式。</p>\n<p>1、常用配置文件设置</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>加载配置文件：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>2、程序中设置</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 六、日志处理器的分类</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">ConsoleHandeler（控制台日志处理器）</th>\n<th style=\"text-align:center\">FileHandler（文件日志处理器）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>日志输出位置</strong></td>\n<td style=\"text-align:center\">输出到控制台</td>\n<td style=\"text-align:center\">输出到文件</td>\n</tr>\n<tr>\n<td><strong>日志输出格式</strong></td>\n<td style=\"text-align:center\">默认是普通文本格式</td>\n<td style=\"text-align:center\">默认是xml格式</td>\n</tr>\n<tr>\n<td><strong>写入方式</strong></td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">可以设置是否追加写入，默认是false</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">Logger的默认日志处理器</td>\n<td style=\"text-align:center\">无</td>\n</tr>\n</tbody>\n</table>\n",
      "image": "https://wuiyan.github.io/assets/images/JUL/流程图.png",
      "date_published": "2023-08-18T12:39:35.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "maven常用依赖",
      "url": "https://wuiyan.github.io/posts/Java%E7%9A%84maven%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96.html",
      "id": "https://wuiyan.github.io/posts/Java%E7%9A%84maven%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96.html",
      "summary": "记录一些常用的maven依赖坐标 1、mybatis 框架 &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.13&lt;/version&gt; &lt;/dependency&gt;",
      "content_html": "<p>记录一些常用的maven依赖坐标</p>\n<h5> 1、mybatis 框架</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 2、mysql 连接驱动</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3、lombok 依赖</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 4、junit5 依赖</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 5、maven打包插件</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 6、tomcat 依赖</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 7、maven的war打包插件</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-08-18T12:39:35.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "Junit单元测试",
      "url": "https://wuiyan.github.io/posts/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "id": "https://wuiyan.github.io/posts/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "summary": "需要先导入Junit依赖才可以使用。 @TEST 注解 Junit最重要的一个注解，在方法上添加上@Test注解后，就可以单独执行这个方法，可以方便的进行测试。 注意事项： 此方法应该是public类型 此方法的返回值应为 void 此方法没有参数 此方法不是静态方法 @Before 注解 使用此注解标记的方法，会在测试方法前执行，且默认每个测试方法执行前都会执行一次此方法。 @After 注解",
      "content_html": "<p>需要先导入Junit依赖才可以使用。</p>\n<h5> @TEST 注解</h5>\n<p>Junit最重要的一个注解，在方法上添加上@Test注解后，就可以单独执行这个方法，可以方便的进行测试。</p>\n<p>注意事项：</p>\n<ul>\n<li>此方法应该是public类型</li>\n<li>此方法的返回值应为 void</li>\n<li>此方法没有参数</li>\n<li>此方法不是静态方法</li>\n</ul>\n<h5> @Before 注解</h5>\n<p>使用此注解标记的方法，会在测试方法前执行，且默认每个测试方法执行前都会执行一次此方法。</p>\n<h5> @After 注解</h5>\n<p>使用此注解标记的方法，会在测试方法后执行，进行相应的收尾工作。</p>\n<h5> 断言工具类</h5>\n<p>用于判断执行结果和预期值是否一致，</p>\n<p>Assert.assertArrayEquals()</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-08-18T12:39:35.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "LomBok-小辣椒插件学习笔记",
      "url": "https://wuiyan.github.io/posts/LomBok-%E5%B0%8F%E8%BE%A3%E6%A4%92%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "id": "https://wuiyan.github.io/posts/LomBok-%E5%B0%8F%E8%BE%A3%E6%A4%92%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "summary": "一、LomBok插件概述 LomBok插件是一款插件化注解API，可以在Java程序编译时根据注解为程序添加一些必需的通用代码，如常用的Getter、Setter、有参和无参构造方法等。 使用这款插件可以在很大程度上简化程序员所需要书写的代码量，但也有可能会带来一些意想不到的小问题，使程序的可读性变差。 二、LomBok插件配置方法 1、导入依赖包，可以通过maven或者手动导入的方式完成。 2、在IDEA中安装LomBok插件(在IDEA的新版本中默认是绑定安装的) 插件的作用：在java文件编译之后的class文件中确实会包含get、set方法，但在书写源码时是没有这些方法的定义的，IDEA会认为这是错误，所以这个时候就需要一个lombok插件来解决问题。",
      "content_html": "<h4> 一、LomBok插件概述</h4>\n<p>LomBok插件是一款插件化注解API，可以在Java程序编译时根据注解为程序添加一些必需的通用代码，如常用的Getter、Setter、有参和无参构造方法等。</p>\n<p>使用这款插件可以在很大程度上简化程序员所需要书写的代码量，但也有可能会带来一些意想不到的小问题，使程序的可读性变差。</p>\n<h4> 二、LomBok插件配置方法</h4>\n<p>1、导入依赖包，可以通过maven或者手动导入的方式完成。</p>\n<p>2、在IDEA中安装LomBok插件(在IDEA的新版本中默认是绑定安装的)</p>\n<p>插件的作用：在java文件编译之后的class文件中确实会包含get、set方法，但在书写源码时是没有这些方法的定义的，IDEA会认为这是错误，所以这个时候就需要一个lombok插件来解决问题。</p>\n<p>3、重启IDEA后，就可以开始使用LomBok插件的功能了，如果在运行时有报错，可能是插件没能正常加载，再次重启IDEA就好。</p>\n<h4> 三、LomBok插件常用注解</h4>\n<h5> 1、@Getter</h5>\n<p>作用：用来给成员变量生成相应的get方法，同时可以为生成的方法指定访问修饰符，默认修饰符是 public ，也可手动指定修饰符。</p>\n<p>位置：指定在类上，会对当前类的所有字段都生成相应的get方法，指定在字段上，只会对当前字段生效，当类和字段都设定上后，字段部分的设定优先生效。</p>\n<p>注：@Getter注解在指定类的时候，默认不会对 静态变量 生效，需要手动在静态字段上指定才可以，对于 final 常量可以正常生效。</p>\n<h5> 2、@Setter</h5>\n<p>作用：用来给成员变量生成相应的set方法，同时可以为生成的方法指定访问修饰符，默认修饰符是 public ，也可手动指定修饰符。</p>\n<p>位置：同 @Getter 的用法。</p>\n<p>注：@Setter注解在指定类的时候，默认也不会对 静态变量 生效，需要手动在静态字段上指定才可以，但对于 final 常量不可以生效。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3、@Accessors</h5>\n<p>作用：这个注解要与@Getter与@Setter搭配使用，用来修改默认的setter与getter方法的形式。</p>\n<p>位置：可指定在类和字段上。</p>\n<p><strong>属性</strong>：</p>\n<p>3.1、chain 属性，属性值有true和false两种，默认是false，打开后可以让set方法支持链式调用，也就是set方法会返回对象本身。</p>\n<p>3.2、fluent 属性，属性值有true和false两种，默认也是false，打开后会使get和set方法的名字变得和成员变量的名称一样，通过重载去调用git和set。</p>\n<p>注：@Getter和@Setter注解生成的get和set方法的命名规则</p>\n<p>默认是在get或set后将原变量名的开头字母大写，再拼接到一块，若原本就是大写，则不进行改变。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 4、@ToString</h5>\n<p>作用：用于格式化输出对象和toString方法类似，生成方法时只会使用类中的非静态成员变量。</p>\n<p>位置：只能指定在类上。</p>\n<p><strong>属性</strong>：</p>\n<ul>\n<li>includeFieldNames = true    // 输出时是否显示字段名 ，默认是true</li>\n<li>exclude = {\"name\"}     // 排除某些字段，可多选，用逗号分隔就好</li>\n<li>of = {\"age\"}      // 只输出某些字段，和exclude不能同时使用</li>\n<li>callSuper = true //是否输出父类对象的toString信息， 默认false</li>\n<li>doNotUseGetters   // 输出时不使用get方法获取成员属性</li>\n</ul>\n<p>@ToString.Include.rank  用于排序，数字越大排序越靠前，只能适用于字段和方法类型。</p>\n<p>@ToString.Include.name  用于自定义字段名称，也只能适用于字段和方法。</p>\n<h5> 5、@EqualsAndHashCode</h5>\n<p>作用：用于生成equals和hashCode方法，也是只会使用非静态成员变量。</p>\n<p>位置：只能指定在类上。</p>\n<p><strong>属性</strong>：</p>\n<ul>\n<li>callSuper 用于比较父类对象是否相同，对于继承的子类的equals方法中最好使用这个选项，可以提高安全性，防止将父类对象和子类对象当成相同的对象。默认是false</li>\n<li>cacheStrategy 对于hashCode方法是否添加缓存，在使用时会将第一次结果保存在变量中，下次就可以直接调用使用，默认是从不。</li>\n<li>exclude = {\"name\"}     // 排除某些字段，可多选，用逗号分隔就好</li>\n<li>of = {\"age\"}      // 只输出某些字段，和exclude不能同时使用</li>\n</ul>\n<h5> 6、构造器相关注解</h5>\n<p><strong>共同点：</strong></p>\n<p>都只能在类上使用。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h6> (1)、@AllArgsConstructor</h6>\n<p>作用：生成所有参数的构造方法，</p>\n<h6> (2)、@NoArgsConstructor</h6>\n<p>作用：生成无参的构造方法</p>\n<p><strong>特有属性</strong>：force：可以将所有 final 字段初始化为 0、null、false。默认为 false。</p>\n<h6> (3)、@RequiredArgsConstructor</h6>\n<p>作用：会将类中所有带有<code>@NonNull注解</code> 的或者带有<code>final修饰的成员变量</code>生成对应的构造方法。</p>\n<h5> 7、@Data</h5>\n<p>作用：相当于注解集合。效果等同于 <strong>@Getter + @Setter + @ToString + @EqualsAndHashCode + @RequiredArgsConstructor</strong> 效果同和这5个注解的效果。</p>\n<p>注：该注解并不包括@NoArgsConstructor和@AllArgsConstructor注解效果，且在有继承的情况下不建议单独使用此注解，因为这里的equals方法没有经过设定，容易出现问题，应和@EqualsAndHashCode配合使用。</p>\n<p>位置：指定在类中</p>\n<p><strong>属性</strong>：staticConstructor：为生成的构造器指定自定义方法名称。</p>\n<h5> 8、@value</h5>\n<p>作用： 将字段都变成不可变类型：<strong>使用final修饰， 同时还包含@ToString、@EqualsAndHashCode、@AllArgsConstructor 、@Getter</strong>(注意只有Getter没有Setter)和@Data的作用比较类似。</p>\n<p>位置：指定在类上</p>\n<p><strong>属性</strong>：staticConstructor：为生成的构造器指定自定义方法名称。</p>\n<h5> 9、@SneakyThrows</h5>\n<p>作用：用于构建try-catch语句将方法包括起来。</p>\n<p>位置：指定在方法或构造方法上</p>\n<p><strong>属性</strong>：value： 用于指明要抛出的异常类型，默认是Throwable</p>\n<h5> 10、@Cleanup</h5>\n<p>作用：主要用来修饰 IO 流相关类, 会在 finally 代码块中对该资源进行 close();</p>\n<p>位置：作用于局部变量中</p>\n<p><strong>属性</strong>：value：指定关闭方法的方法名，默认是close。</p>\n<p>注：也可以使用try-with-resources的写法，也可以自动关闭歹有autoclose的连接。</p>\n<h5> 11、@Builder</h5>\n<p>作用：建造者模式，一种比较重要的创建对象的过程，不再是生成一个构造方法，而是使用了一个内部类来完成对象的创建，可以精细化、分步去进行一个类对象的创建。</p>\n<p>构造器类的的set方法支持链式调用</p>\n<p>位置：类、方法、构造器上使用</p>\n<p><strong>属性</strong>：</p>\n<p><code>builderMethodName</code>：生成builder内部类对象的方法名称，默认是：builder</p>\n<p><code>buildMethodName</code>： 返回建造对象的方法名称，默认是：build</p>\n<p><code>builderClassName</code>：内部类的类名，</p>\n<p><code>toBuilder</code>： 将build重新变回builder进行再次设置，默认为false</p>\n<p><strong>@Builder.Default</strong></p>\n<p>使用在属性上，用于指定某个属性的默认值，若无设置则使用默认值。</p>\n<p><strong>@Builder.ObtainVia</strong></p>\n<p>使用在属性上和方法内的参数里，用于对toBuilder方法生成的builder对象的值或方法的获取方式做一些限定。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 四、LomBok插件优缺点</h4>\n<p>优点：</p>\n<p>可以帮助我们省去很多冗余代码，使项目的开发更加高效、便捷。</p>\n<p>缺点：</p>\n<p>有很高的侵入性，在项目中有人使用会使得所有的人都要去使用这种插件，</p>\n<p>会让代码可读性变差，调试起来也更加麻烦</p>\n<p>同时过度使用可能会创造很多用不到的方法，造成隐患。</p>\n",
      "date_published": "2023-03-16T22:54:45.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "MySQL数据库学习笔记",
      "url": "https://wuiyan.github.io/posts/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "id": "https://wuiyan.github.io/posts/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",
      "summary": "一、数据库简介 MySQL数据库是一款关系型数据库管理系统，主要用于中小规模的数据的存储和处理，是现在相当流行的一款数据库类型。 关系型数据库是采用了关系模型来组织数据的数据库，实体之间的关系有一对一、一对多、多对多三种。 二、数据库的三大范式 范式：数据库设计时需要遵循一定的种规则，在关系型数据库中，这种规则就被称为范式。 1、第一范式(1NF)： 基本数据项不可再分，也就是属性已经是最小的了，不能再继续向下划分。 2、第二范式(2NF)： 满足第一范式的前提下，要有一个主键且其他属性要完全依赖于主键。",
      "content_html": "<h4> 一、数据库简介</h4>\n<p>MySQL数据库是一款关系型数据库管理系统，主要用于中小规模的数据的存储和处理，是现在相当流行的一款数据库类型。</p>\n<p>关系型数据库是采用了关系模型来组织数据的数据库，实体之间的关系有一对一、一对多、多对多三种。</p>\n<h4> 二、数据库的三大范式</h4>\n<p>范式：数据库设计时需要遵循一定的种规则，在关系型数据库中，这种规则就被称为范式。</p>\n<h5> 1、第一范式(1NF)：</h5>\n<p>基本数据项不可再分，也就是属性已经是最小的了，不能再继续向下划分。</p>\n<h5> 2、第二范式(2NF)：</h5>\n<p>满足第一范式的前提下，要有一个主键且其他属性要完全依赖于主键。</p>\n<h5> 3、第三范式(3NF)：</h5>\n<p>在满足第二范式的前提下，所有属性不能传递依赖于主键。</p>\n<p>在此之外还有一些其他的范式存在，比如第四范式(BCNF)等，但一般情况下满足三大范式就已经是一个比较成功的数据库设计了。</p>\n<h4> 三、SQL语句</h4>\n<h5> 1、介绍</h5>\n<p>SQL语句也被称作结构化查询语句，主要用于对关系型数据库进行各种操作，如：增删查改、建库删库等。</p>\n<p>基本上所有的关系型数据库都支持SQL语言，但不同的关系型数据库SQL的细节方面会有些区别，不过都大同小异。</p>\n<h5> 2、特点：</h5>\n<p>(1)、支持多行书写。</p>\n<p>(2)、每一行语句都以分号结尾。</p>\n<p>(3)、其本身不区分大小写。</p>\n<h5> 3、分类</h5>\n<p>SQL语句依据实现的功能不同可分为四种：</p>\n<p>(1)、数据库查询语言(DQL)</p>\n<p>主要用于查询数据库中表的记录，关键字有select、from、where等。</p>\n<p>(2)、数据库操作语言(DML)</p>\n<p>主要用于对数据库中的数据进行添加、更新和删除操作，关键字有insert、delete、update等。</p>\n<p>(3)、数据库定义语言(DDL)</p>\n<p>主要用于定义和删除数据库对象，如数据库、表、列等，关键字有create，alter，drop等。</p>\n<p>(4)、数据库控制语言(DCL)</p>\n<p>主要用于数据库的访问权限、安全级别以及用户管理等，关键字有grant等。</p>\n<h5> 4、数据库定义语言的使用</h5>\n<p>(1)、创建数据库</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>(2)、删除数据库</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>(3)、创建表</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>(4)、修改表</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>举例：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>(5)、删除表</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 附录</h3>\n<h4> 一、约束条件</h4>\n<h5> 1、列级约束条件</h5>\n<p>对一个数据列建立的约束，就被称为列级约束条件。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">约束条件</th>\n<th style=\"text-align:center\">约束描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">primary key</td>\n<td style=\"text-align:center\">主键约束，约束的值可唯一的标识对应的记录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">foreign key</td>\n<td style=\"text-align:center\">外键约束，约束与表之间的关系</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unique</td>\n<td style=\"text-align:center\">唯一约束，约束字段的值是惟一的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not null</td>\n<td style=\"text-align:center\">非空约束，非空字段的值不能为空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">默认值约束，用于保证该字段在不设置具体的内容时，有一个默认值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">check</td>\n<td style=\"text-align:center\">检查约束，限制某个字段的值取值范围，MySQL8支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">auto_increment</td>\n<td style=\"text-align:center\">自增约束可以使表中某个字段的值自动增加，但一张表中只能存在一个自增长字段，</td>\n</tr>\n</tbody>\n</table>\n<h5> 2、表级约束条件</h5>\n<p>一般是对多个数据列建立的约束，但也可以应用于一列上。</p>\n<table>\n<thead>\n<tr>\n<th>约束条件</th>\n<th>约束描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>primary key</td>\n<td>主键约束，约束的值可唯一的标识对应的记录</td>\n</tr>\n<tr>\n<td>foreign key</td>\n<td>外键约束，约束与表之间的关系</td>\n</tr>\n<tr>\n<td>unique</td>\n<td>唯一约束，约束字段的值是惟一的</td>\n</tr>\n<tr>\n<td>check</td>\n<td>检查约束，限制某个字段的值取值范围</td>\n</tr>\n</tbody>\n</table>\n<h4> 二、SQL常用数据类型</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">大小</th>\n<th style=\"text-align:center\">无符号范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">SMALLINT</td>\n<td style=\"text-align:center\">整数</td>\n<td style=\"text-align:center\">2 Bytes</td>\n<td style=\"text-align:center\">(0，65 535)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">INT</td>\n<td style=\"text-align:center\">整数</td>\n<td style=\"text-align:center\">4 Bytes</td>\n<td style=\"text-align:center\">(0，4 294 967 295)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FLOAT</td>\n<td style=\"text-align:center\">浮点型</td>\n<td style=\"text-align:center\">4 Bytes</td>\n<td style=\"text-align:center\">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DOUBLE</td>\n<td style=\"text-align:center\">浮点型</td>\n<td style=\"text-align:center\">8 Bytes</td>\n<td style=\"text-align:center\">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DATETIME</td>\n<td style=\"text-align:center\">日期和时间类型</td>\n<td style=\"text-align:center\">8 Bytes</td>\n<td style=\"text-align:center\">'1000-01-01 00:00:00' 到 '9999-12-31 23:59:59'</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CHAR</td>\n<td style=\"text-align:center\">字符串类型</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">大小可以自行设置，是定长字符串，0-255 Bytes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">VARCHAR</td>\n<td style=\"text-align:center\">字符串类型</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">大小可以自行设置，是可变字符串，0-65535 Bytes</td>\n</tr>\n</tbody>\n</table>\n<p>梗知识</p>\n<ul>\n<li>CRUD程序员，CRUD是数据库增删查改英文的缩写，用这个来形容程序员是有些贬义的，但更多的是用来自嘲玩梗。</li>\n</ul>\n",
      "date_published": "2023-03-15T22:54:45.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "SSM框架使用教程",
      "url": "https://wuiyan.github.io/posts/SSM%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html",
      "id": "https://wuiyan.github.io/posts/SSM%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html",
      "summary": "SSM框架使用教程 通过注解配置spring框架 1、添加spring的坐标依赖 &lt;!--spring 框架依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;5.3.19&lt;/version&gt; &lt;/dependency&gt;",
      "content_html": "<h2> SSM框架使用教程</h2>\n<h3> 通过注解配置spring框架</h3>\n<h5> 1、添加spring的坐标依赖</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 2、创建spring配置类</h5>\n<p>作用相当于spring的xml配置文件，使用@Configuration注解指定</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3、创建基础Bean对象</h5>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 4、通过配置类加载spring配置</h5>\n<div class=\"language-Java line-numbers-mode\" data-ext=\"Java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 5、获取Bean对象</h5>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 通过注解配置springmvc</h3>\n<h5> 1、添加springmvc的坐标依赖：</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 2、web模块和配置类实现</h5>\n<p>检查当前项目有无web模块，若没有则在项目设置中添加，添加后注意修改其路径，让其处于src/main/目录下。</p>\n<p>springmvc需要多个配置类才可以实现其全部功能，主要有：</p>\n<ul>\n<li>WebInitializer类：继承AbstractAnnotationConfigDispatcherServletInitializer，用于代替web.xml配置DispatcherServlet</li>\n<li>WebServletConfiguration类，mvc关于webServlet的配置类，需要着重配置。</li>\n<li>MainConfiguration类，mvc关于root的配置类，可暂时空置。</li>\n</ul>\n<p>对于WebInitializer类：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对于WebServletConfiguration类：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>若使用Thymeleaf配置视图解析器</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3、创建测试类</h5>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 4、tomcat启动配置</h5>\n<p>检查tomcat部署有无工件，若没有工件，则自行创建，创建时需注意，应基于当前的web模块进行创建，创建类型为web应用程序 展开型。</p>\n<p>url和应用程序上下文都可调整，但需保持同步。之后就可以请求测试返回结果了。</p>\n<h5> 5、附录--自定义mvc中的web配置</h5>\n<p>如果想对于WebServletConfiguration类进行一些自定义配置可以实现WebMvcConfigurer接口，同时要加上@EnableWebMvc注解来启用mvc的自定义配置，不然自定义配置可能无法生效。</p>\n<p>常用方法：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 通过注解配置Mybatis框架</h3>\n<h5> 1、添加Mybatis的坐标依赖</h5>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 2、添加配置类MybatisConfiguration</h5>\n<p>它相当于Mybatis的xml配置文件本身，下面是相应配置</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3、添加mapper映射</h5>\n<p>在配置类指定的mapper包下创建mapper接口，编写相应的SQL语句，对应xml相应的mapper配置</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 4、添加具体实现</h5>\n<p>编写相应的实现类，去执行相应的mapper中的SQL语句，为了解耦，可以让实现类实现接口，通过接口去调用具体的实现类，实现类和接口要放在配置类中指定的Bean对象的扫描目录</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 5、编写测试类，测试实验效果</h5>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 附录--配置类中的部分注解说明</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">注解名称</th>\n<th style=\"text-align:center\">@Configuration</th>\n<th style=\"text-align:center\">@Bean</th>\n<th style=\"text-align:center\">@ComponentScan</th>\n<th style=\"text-align:center\">@MapperScan</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">作用</td>\n<td style=\"text-align:center\">指定当前类为配置类</td>\n<td style=\"text-align:center\">在配置类中使用，指定当前方法返回的对象为Bean对象</td>\n<td style=\"text-align:center\">将指定目录存在@Component注解的类注册为Bean对象</td>\n<td style=\"text-align:center\">将指定目录的mapper接口类注册为Bean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类比</td>\n<td style=\"text-align:center\">相当于xml配置文件</td>\n<td style=\"text-align:center\">相当于xml中的&lt;bean&gt;标签</td>\n<td style=\"text-align:center\">相当于扫描器</td>\n<td style=\"text-align:center\">相当于扫描器</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2023-08-18T12:39:35.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "SSM框架"
      ]
    },
    {
      "title": "Servlet 体系结构概述",
      "url": "https://wuiyan.github.io/posts/Servlet%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.html",
      "id": "https://wuiyan.github.io/posts/Servlet%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.html",
      "summary": "Servlet 体系结构概述 1、servlet 的概念： servlet 是用于处理请求并动态生成响应内容返回给客户端的一种接口规范，只是定义了接口，并没有去实现，有些类似于JDBC的样子，它也有许多不同的实现类。 2、体系结构 顶级接口：Servelt 接口\tServeltConfig 接口 继承自 Servelt 的接口和实现类： 顶级父接口：Servlet。 次级实现类或接口：GenericServlet 实现类、ServletRequest 接口、ServletResponse 接口。 Http请求处理：HttpServlet 实现类、HttpServletRequest 接口、HttpServletResponse 接口",
      "content_html": "<h3> Servlet 体系结构概述</h3>\n<h5> 1、servlet 的概念：</h5>\n<p>servlet 是用于处理请求并动态生成响应内容返回给客户端的一种接口规范，只是定义了接口，并没有去实现，有些类似于JDBC的样子，它也有许多不同的实现类。</p>\n<h5> 2、体系结构</h5>\n<p>顶级接口：Servelt 接口\tServeltConfig 接口</p>\n<p>继承自 Servelt 的接口和实现类：</p>\n<ul>\n<li>顶级父接口：Servlet。\n<ul>\n<li>次级实现类或接口：GenericServlet 实现类、ServletRequest 接口、ServletResponse 接口。\n<ul>\n<li>Http请求处理：HttpServlet 实现类、HttpServletRequest 接口、HttpServletResponse 接口</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure><img src=\"/assets/images/Servlet/1.png\" alt=\"关系图\" tabindex=\"0\" loading=\"lazy\"><figcaption>关系图</figcaption></figure>\n<p>一般处理请求比较常用的是带Http请求的类，对于Http相关的请求支持和方法都比较全面，推荐使用。</p>\n",
      "image": "https://wuiyan.github.io/assets/images/Servlet/1.png",
      "date_published": "2023-08-18T12:39:35.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "JavaWeb"
      ]
    },
    {
      "title": "关于Java中注解的使用",
      "url": "https://wuiyan.github.io/posts/%E5%85%B3%E4%BA%8EJava%E4%B8%AD%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8.html",
      "id": "https://wuiyan.github.io/posts/%E5%85%B3%E4%BA%8EJava%E4%B8%AD%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8.html",
      "summary": "一、注解的概述 注解(Annotation)，也叫元数据，是一种代码级别的说明，可以在程序中设定标记，这些标记可以用于检查代码、生成文档、使用反射等。 简单来说,注解是一种将meta标记(meta-tag)与程序元素关联的机制,允许编译器(compiler)或JVM从有注解的元素提取程序行为,必要时生成相互依赖的代码。 注解可以在包、类、方法、字段、局部变量、方法参数等几乎所有的东西前面声明，声明方法是 ‘@注解名’ 。后面还可添加参数。 1.1、注解的种类 注解分为两种，一种是预设注解，由Java原生提供的注解类型，另一种是元注解，用来定义注解的注解，常常用来自定义其他注解",
      "content_html": "<h4> 一、注解的概述</h4>\n<p>注解(Annotation)，也叫元数据，是一种代码级别的说明，可以在程序中设定标记，这些标记可以用于检查代码、生成文档、使用反射等。</p>\n<p>简单来说,注解是一种将meta标记(meta-tag)与程序元素关联的机制,允许编译器(compiler)或JVM从有注解的元素提取程序行为,必要时生成相互依赖的代码。</p>\n<p>注解可以在包、类、方法、字段、局部变量、方法参数等几乎所有的东西前面声明，声明方法是 ‘@注解名’ 。后面还可添加参数。</p>\n<h6> 1.1、注解的种类</h6>\n<p>注解分为两种，一种是预设注解，由Java原生提供的注解类型，另一种是元注解，用来定义注解的注解，常常用来自定义其他注解</p>\n<h4> 二、预设注解</h4>\n<ul>\n<li><code>@Deprecated</code>：表示某个类或方法已过时，有更好的解决方案。</li>\n<li><code>@Override</code>：提示子类要复写父类中被 @Override 修饰的方法。</li>\n<li><code>@SuppressWarnings</code>：指示编译器忽略注解中声明的警告。</li>\n<li><code>@SafeVarargs</code>：提醒开发者不要用参数做一些不安全的操作。</li>\n<li><code>@Functionallnterface</code>：用翔实的注释类型来表示一个接口类型声明的目的是空功能接口由java语言规范定义。</li>\n</ul>\n<h4> 三、元注解</h4>\n<ul>\n<li><code>@Retention</code>：指定了注解的保留范围。</li>\n<li><code>@Documented</code>：指定了注解将被 Javadoc 工具提取成文档，包含到 Javadoc 中去。</li>\n<li><code>@Target</code>：指定了注解运用的地方。</li>\n<li><code>@Inherited</code>：指定了注解将具有继承性。</li>\n<li><code>@Repeatable</code>：指定了注解是可重复的。</li>\n</ul>\n<h6> 3.1、@Retention</h6>\n<p>当 @Retention 应用到一个注解上的时候，它解释说明了这个注解的的存活时间。</p>\n<ul>\n<li>RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。(存活的时间是在源码和编译中)</li>\n<li>RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。</li>\n<li>RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。</li>\n</ul>\n<div class=\"language-Java line-numbers-mode\" data-ext=\"Java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h6> 3.2、@Target</h6>\n<p>用于给定义的注解限制其生效范围。</p>\n<ul>\n<li>ElementType.ANNOTATION_TYPE 可以给一个注解进行注解</li>\n<li>ElementType.CONSTRUCTOR 可以给构造方法进行注解</li>\n<li>ElementType.FIELD 可以给属性进行注解</li>\n<li>ElementType.LOCAL_VARIABLE 可以给局部变量进行注解</li>\n<li>ElementType.METHOD 可以给方法进行注解</li>\n<li>ElementType.PACKAGE 可以给一个包进行注解</li>\n<li>ElementType.PARAMETER 可以给一个方法内的参数进行注解</li>\n<li>ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</li>\n</ul>\n<p>例子：</p>\n<div class=\"language-Java line-numbers-mode\" data-ext=\"Java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 四、自定义注解</h4>\n<h6> 1、自定义注解的定义</h6>\n<p>使用 @interface 关键字进行定义，内部只可以放属性，不可以有方法，属性也可以设置默认值，使用关键字default定义，</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h6> 2、使用元注解修饰自定义注解</h6>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 五、注解的作用</h4>\n<p>注解虽然不直接影响代码的语义，但可以通过使用注解可以在程序的不同阶段获得注解上的信息，从而通过使用反射等方式动态的对程序做出一定的干预。</p>\n",
      "date_published": "2023-08-18T12:39:35.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "JavaSE"
      ]
    },
    {
      "title": "基于Hexo框架+GitHub的个人博客搭建",
      "url": "https://wuiyan.github.io/posts/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6_GitHub%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html",
      "id": "https://wuiyan.github.io/posts/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6_GitHub%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html",
      "summary": "一、准备工作 1、注册GitHub账号 GitHub官网：https://github.com/ 邮箱：163邮箱可以，QQ邮箱不确定，可自行测试。 可使用QQ邮箱。 注册完成后需要注意几点：1、记住用户名，2、记住密码，3、记住注册邮箱。 作用：用于为博客的远程部署提供域名和静态网页访问功能等。 2、安装node.js",
      "content_html": "<h3> 一、准备工作</h3>\n<h5> 1、注册GitHub账号</h5>\n<p>GitHub官网：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/</a></p>\n<p>邮箱：163邮箱可以，<s>QQ邮箱不确定，可自行测试。</s> 可使用QQ邮箱。</p>\n<p><strong>注册完成后需要注意几点：1、记住用户名，2、记住密码，3、记住注册邮箱。</strong></p>\n<p>作用：用于为博客的远程部署提供域名和静态网页访问功能等。</p>\n<h5> 2、安装node.js</h5>\n<p>node.js官网：<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js (nodejs.org)</a></p>\n<p>最好下载稳定版，安装一般无脑下一步就好，默认设置就可以。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>作用：用于提供hexo博客框架的运行环境，版本不能太低，不然可能不支持。</p>\n<h5> 3、安装Git</h5>\n<p>Git官网：<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Git (git-scm.com)</a></p>\n<p>下载安装版就好，也是可以无脑下一步，安装完成后在桌面右键，可以看到右键菜单多了两个选项，即代表安装成功。</p>\n<p>作用：用于管理和连接远程仓库，是一个相当不错的分布式版本控制系统，在这里用来上传本地博客到云端仓库。</p>\n<h5> 4、网页翻译插件</h5>\n<p>因为GitHub是全英文界面，如果英文不好可以使用插件或者翻译工具来帮助自己理接页面内容。对自己英语水平有自信可以无视这一步。</p>\n<h3> 二、搭建本地博客</h3>\n<h5> 1、安装hexo框架</h5>\n<p>hexo官网：<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Hexo</a></p>\n<p>这里需要用到刚刚下载的Git工具在命令行中进行操作，但本质上也只是复制粘贴命令，不需要担心。</p>\n<p>1.1、新建博客文件夹</p>\n<p>为博客新建一个空文件夹，名称随意，记住所在位置路径，之后都要在这里面执行命令。</p>\n<p><strong>在空文件夹内右键——&gt;选中 Git Bash Here ——&gt;进入命令行界面</strong></p>\n<p>依次输入下列命令即可完成hexo博客的搭建</p>\n<p><strong>注：Git工具不支持Ctrl+C快捷键复制，请统一用右键选择复制粘贴</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>若一切正常没什么明显报错或卡死的情况下，你就成功在本地搭建了属于自己的博客，可以通过 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:4000</a> 去访问了。</p>\n<p><strong>注：此博客只有到 hexo本地服务运行时才可访问。</strong></p>\n<p>当然，意外很有可能发生，下面有一些可能的意外情况的处理方法：</p>\n<h5> 2、意外情况处理</h5>\n<p>2.1、如果在使用npm开头的命令卡死时，大概率是因为npm下载默认是从外网下载，速度和稳定性都很感人，这时候可以试下临时换源，在npm命令后缀下列参数就好。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2.2、如果在hexo init bolg 初始化博客时卡死，也很有可能是因为网速问题，但这时候不能直接加后缀，是不支持的，将上述命令用下列命令代替就好，下列命令就是所需要执行的步骤。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2.3、如果在npm安装依赖包的时候有警告弹出，一般能不管他就不去管他，<sup>_</sup></p>\n<h3> 三、远程部署到GitHub</h3>\n<h5> 1、通过Git工具的ssh连接GitHub</h5>\n<p><strong>配置Git 用户名和邮箱</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>在 git bash here 中创建一个ssh密钥</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>之后在 .ssh文件夹下生成两个文件： id_rsa id_rsa.pub</p>\n<p>注意：pub文件放置的，就是我们的公开的ssh密钥，也是我们之后要用到的ssh密钥。</p>\n<p><strong>将ssh密钥添加到GitHub中</strong></p>\n<p>用文本编辑器打开 id_rsa.pub  文件，复制文件里面的所有内容。</p>\n<p>进去GitHub的个人主页——&gt;进入设置界面——&gt;进入SSH and GPG 页面——&gt;选择New ssh key</p>\n<p>——&gt;将复制的密钥填进去，保存确认就好，有可能需要密码验证，输入确认就好。</p>\n<p><strong>在Git bash here命令窗口中</strong>，输入下列命令</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h5> 2、新建GitHub仓库并设置pags</h5>\n<p>至此Git工具和GitHub的连接就已经基本完成，之后就要准备将GitHub的上传仓库配置好。</p>\n<p>在GitHub个人主页点击新建仓库——&gt;仓库名称需要注意，<strong><a href=\"http://xn--eqr924avxo.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">用户名.github.io</a></strong> 要按照这个格式填写</p>\n<p>——&gt;在Add a README file 前的勾打上——&gt;点击生成仓库。</p>\n<p><strong>注：仓库名一定要按照格式起，比如用户名为 wuyan 则仓库名为 <a href=\"http://wuyan.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">wuyan.github.io</a></strong></p>\n<p>进入新建的仓库，在上方找到仓库设置——&gt;选择左侧的Pages选项——&gt;点击Choose a theme</p>\n<p>——&gt;<strong>选择分支为main 路径为root后点击 Save 保存即可。</strong></p>\n<h5> 3、修改hexo的配置文件</h5>\n<p>在<strong>自己生成的的博客文件夹</strong>下找到 _config.yml 文件，将文件最后的内容按照下列格式修改，repo的位置填写在GitHub仓库的SSH的连接，位置：个人仓库——&gt;Code——&gt;SSH——&gt;复制链接，粘贴即可</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>附：实在找不到文件位置的，可使用文件搜索工具进行查找。</p>\n<p>推荐工具：Everything ，链接：<a href=\"https://www.voidtools.com/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">voidtools</a></p>\n<h3> 四、上传网站并测试</h3>\n<p>到这一步基本上所有的步骤都已进行完毕，只要将本地博客上传到GitHub即可。</p>\n<p>在博客根目录启动 git Bash Here 命令行窗口，运行下列命令上传到GitHub仓库</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>上传完成后就可以在GitHub中看到自己的网页文件，可以通过 <strong><a href=\"http://xn--eqr924avxo.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">用户名.github.io</a></strong>  去访问自己的网页了，到此整体博客就搭建完成了，如果上传卡死，可以用Ctrl + C 组合键取消后重试，直至文件全部上传成功。</p>\n<!--最后祝有志者事竟成！-->",
      "date_published": "2023-08-18T12:39:35.000Z",
      "date_modified": "2023-08-18T12:39:35.000Z",
      "authors": [],
      "tags": [
        "博客搭建"
      ]
    }
  ]
}